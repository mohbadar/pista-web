import { ComponentFactoryResolver, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, ViewContainerRef } from '@angular/core';
import { SVGCacheService } from './svg-cache.service';
import { InlineSVGService } from './inline-svg.service';
import { SVGScriptEvalMode, InlineSVGConfig } from './inline-svg.config';
import * as ɵngcc0 from '@angular/core';
export declare class InlineSVGDirective implements OnInit, OnChanges, OnDestroy {
    private _el;
    private _viewContainerRef;
    private _resolver;
    private _svgCache;
    private _renderer;
    private _inlineSVGService;
    private _config;
    private platformId;
    inlineSVG: string;
    replaceContents: boolean;
    prepend: boolean;
    injectComponent: boolean;
    cacheSVG: boolean;
    setSVGAttributes: {
        [key: string]: any;
    };
    removeSVGAttributes: Array<string>;
    forceEvalStyles: boolean;
    evalScripts: SVGScriptEvalMode;
    fallbackImgUrl: string;
    onSVGLoaded: (svg: SVGElement, parent: Element | null) => SVGElement;
    onSVGInserted: EventEmitter<SVGElement>;
    onSVGFailed: EventEmitter<any>;
    private _supportsSVG;
    private _prevUrl;
    private _svgComp;
    private _subscription;
    constructor(_el: ElementRef, _viewContainerRef: ViewContainerRef, _resolver: ComponentFactoryResolver, _svgCache: SVGCacheService, _renderer: Renderer2, _inlineSVGService: InlineSVGService, _config: InlineSVGConfig, platformId: Object);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private _insertSVG;
    private _processSvg;
    private _insertEl;
    private _fail;
    private _isValidPlatform;
    private _isSSRDisabled;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InlineSVGDirective, [null, null, null, null, null, null, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<InlineSVGDirective, "[inlineSVG]", never, { "replaceContents": "replaceContents"; "prepend": "prepend"; "injectComponent": "injectComponent"; "cacheSVG": "cacheSVG"; "forceEvalStyles": "forceEvalStyles"; "evalScripts": "evalScripts"; "inlineSVG": "inlineSVG"; "setSVGAttributes": "setSVGAttributes"; "removeSVGAttributes": "removeSVGAttributes"; "fallbackImgUrl": "fallbackImgUrl"; "onSVGLoaded": "onSVGLoaded"; }, { "onSVGInserted": "onSVGInserted"; "onSVGFailed": "onSVGFailed"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLXN2Zy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiaW5saW5lLXN2Zy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNWR0NhY2hlU2VydmljZSB9IGZyb20gJy4vc3ZnLWNhY2hlLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5saW5lU1ZHU2VydmljZSB9IGZyb20gJy4vaW5saW5lLXN2Zy5zZXJ2aWNlJztcbmltcG9ydCB7IFNWR1NjcmlwdEV2YWxNb2RlLCBJbmxpbmVTVkdDb25maWcgfSBmcm9tICcuL2lubGluZS1zdmcuY29uZmlnJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElubGluZVNWR0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX2VsO1xuICAgIHByaXZhdGUgX3ZpZXdDb250YWluZXJSZWY7XG4gICAgcHJpdmF0ZSBfcmVzb2x2ZXI7XG4gICAgcHJpdmF0ZSBfc3ZnQ2FjaGU7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBfaW5saW5lU1ZHU2VydmljZTtcbiAgICBwcml2YXRlIF9jb25maWc7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIGlubGluZVNWRzogc3RyaW5nO1xuICAgIHJlcGxhY2VDb250ZW50czogYm9vbGVhbjtcbiAgICBwcmVwZW5kOiBib29sZWFuO1xuICAgIGluamVjdENvbXBvbmVudDogYm9vbGVhbjtcbiAgICBjYWNoZVNWRzogYm9vbGVhbjtcbiAgICBzZXRTVkdBdHRyaWJ1dGVzOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9O1xuICAgIHJlbW92ZVNWR0F0dHJpYnV0ZXM6IEFycmF5PHN0cmluZz47XG4gICAgZm9yY2VFdmFsU3R5bGVzOiBib29sZWFuO1xuICAgIGV2YWxTY3JpcHRzOiBTVkdTY3JpcHRFdmFsTW9kZTtcbiAgICBmYWxsYmFja0ltZ1VybDogc3RyaW5nO1xuICAgIG9uU1ZHTG9hZGVkOiAoc3ZnOiBTVkdFbGVtZW50LCBwYXJlbnQ6IEVsZW1lbnQgfCBudWxsKSA9PiBTVkdFbGVtZW50O1xuICAgIG9uU1ZHSW5zZXJ0ZWQ6IEV2ZW50RW1pdHRlcjxTVkdFbGVtZW50PjtcbiAgICBvblNWR0ZhaWxlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHJpdmF0ZSBfc3VwcG9ydHNTVkc7XG4gICAgcHJpdmF0ZSBfcHJldlVybDtcbiAgICBwcml2YXRlIF9zdmdDb21wO1xuICAgIHByaXZhdGUgX3N1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihfZWw6IEVsZW1lbnRSZWYsIF92aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBfcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgX3N2Z0NhY2hlOiBTVkdDYWNoZVNlcnZpY2UsIF9yZW5kZXJlcjogUmVuZGVyZXIyLCBfaW5saW5lU1ZHU2VydmljZTogSW5saW5lU1ZHU2VydmljZSwgX2NvbmZpZzogSW5saW5lU1ZHQ29uZmlnLCBwbGF0Zm9ybUlkOiBPYmplY3QpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIF9pbnNlcnRTVkc7XG4gICAgcHJpdmF0ZSBfcHJvY2Vzc1N2ZztcbiAgICBwcml2YXRlIF9pbnNlcnRFbDtcbiAgICBwcml2YXRlIF9mYWlsO1xuICAgIHByaXZhdGUgX2lzVmFsaWRQbGF0Zm9ybTtcbiAgICBwcml2YXRlIF9pc1NTUkRpc2FibGVkO1xufVxuIl19