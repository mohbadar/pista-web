import { ViewContainerRef, ComponentFactoryResolver, ElementRef, ChangeDetectorRef, OnInit, OnChanges, SimpleChanges, DoCheck, KeyValueDiffers, EventEmitter, Renderer2 } from '@angular/core';
import { DaterangepickerComponent } from './daterangepicker.component';
import * as _moment from 'moment';
import { LocaleConfig } from './daterangepicker.config';
import { LocaleService } from './locale.service';
import * as ɵngcc0 from '@angular/core';
export declare class DaterangepickerDirective implements OnInit, OnChanges, DoCheck {
    viewContainerRef: ViewContainerRef;
    _changeDetectorRef: ChangeDetectorRef;
    private _componentFactoryResolver;
    private _el;
    private _renderer;
    private differs;
    private _localeService;
    private elementRef;
    picker: DaterangepickerComponent;
    private _onChange;
    private _onTouched;
    private _validatorChange;
    private _value;
    private localeDiffer;
    minDate: _moment.Moment;
    maxDate: _moment.Moment;
    autoApply: boolean;
    alwaysShowCalendars: boolean;
    showCustomRangeLabel: boolean;
    linkedCalendars: boolean;
    dateLimit: number;
    singleDatePicker: boolean;
    showWeekNumbers: boolean;
    showISOWeekNumbers: boolean;
    showDropdowns: boolean;
    isInvalidDate: Function;
    isCustomDate: Function;
    isTooltipDate: Function;
    showClearButton: boolean;
    customRangeDirection: boolean;
    ranges: any;
    opens: string;
    drops: string;
    firstMonthDayClass: string;
    lastMonthDayClass: string;
    emptyWeekRowClass: string;
    firstDayOfNextMonthClass: string;
    lastDayOfPreviousMonthClass: string;
    keepCalendarOpeningWithRange: boolean;
    showRangeLabelOnInput: boolean;
    showCancel: boolean;
    lockStartDate: boolean;
    timePicker: Boolean;
    timePicker24Hour: Boolean;
    timePickerIncrement: number;
    timePickerSeconds: Boolean;
    closeOnAutoApply: boolean;
    _locale: LocaleConfig;
    set locale(value: any);
    get locale(): any;
    private _endKey;
    private _startKey;
    set startKey(value: any);
    set endKey(value: any);
    notForChangesProperty: Array<string>;
    get value(): any;
    set value(val: any);
    onChange: EventEmitter<Object>;
    rangeClicked: EventEmitter<Object>;
    datesUpdated: EventEmitter<Object>;
    startDateChanged: EventEmitter<Object>;
    endDateChanged: EventEmitter<Object>;
    constructor(viewContainerRef: ViewContainerRef, _changeDetectorRef: ChangeDetectorRef, _componentFactoryResolver: ComponentFactoryResolver, _el: ElementRef, _renderer: Renderer2, differs: KeyValueDiffers, _localeService: LocaleService, elementRef: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    onBlur(): void;
    open(event?: any): void;
    hide(e?: any): void;
    toggle(e?: any): void;
    clear(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private setValue;
    /**
     * Set position of the calendar
     */
    setPosition(): void;
    inputChanged(e: any): void;
    /**
     * For click outside of the calendar's container
     * @param event event object
     */
    outsideClick(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DaterangepickerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DaterangepickerDirective, "input[ngxDaterangepickerMd]", never, { "dateLimit": "dateLimit"; "showCancel": "showCancel"; "lockStartDate": "lockStartDate"; "timePicker": "timePicker"; "timePicker24Hour": "timePicker24Hour"; "timePickerIncrement": "timePickerIncrement"; "timePickerSeconds": "timePickerSeconds"; "closeOnAutoApply": "closeOnAutoApply"; "_endKey": "_endKey"; "drops": "drops"; "opens": "opens"; "locale": "locale"; "startKey": "startKey"; "endKey": "endKey"; "minDate": "minDate"; "maxDate": "maxDate"; "autoApply": "autoApply"; "alwaysShowCalendars": "alwaysShowCalendars"; "showCustomRangeLabel": "showCustomRangeLabel"; "linkedCalendars": "linkedCalendars"; "singleDatePicker": "singleDatePicker"; "showWeekNumbers": "showWeekNumbers"; "showISOWeekNumbers": "showISOWeekNumbers"; "showDropdowns": "showDropdowns"; "isInvalidDate": "isInvalidDate"; "isCustomDate": "isCustomDate"; "isTooltipDate": "isTooltipDate"; "showClearButton": "showClearButton"; "customRangeDirection": "customRangeDirection"; "ranges": "ranges"; "lastMonthDayClass": "lastMonthDayClass"; "emptyWeekRowClass": "emptyWeekRowClass"; "firstDayOfNextMonthClass": "firstDayOfNextMonthClass"; "lastDayOfPreviousMonthClass": "lastDayOfPreviousMonthClass"; "keepCalendarOpeningWithRange": "keepCalendarOpeningWithRange"; "showRangeLabelOnInput": "showRangeLabelOnInput"; }, { "onChange": "change"; "rangeClicked": "rangeClicked"; "datesUpdated": "datesUpdated"; "startDateChanged": "startDateChanged"; "endDateChanged": "endDateChanged"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXJhbmdlcGlja2VyLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJkYXRlcmFuZ2VwaWNrZXIuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdDb250YWluZXJSZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBEb0NoZWNrLCBLZXlWYWx1ZURpZmZlcnMsIEV2ZW50RW1pdHRlciwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlcmFuZ2VwaWNrZXJDb21wb25lbnQgfSBmcm9tICcuL2RhdGVyYW5nZXBpY2tlci5jb21wb25lbnQnO1xuaW1wb3J0ICogYXMgX21vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgTG9jYWxlQ29uZmlnIH0gZnJvbSAnLi9kYXRlcmFuZ2VwaWNrZXIuY29uZmlnJztcbmltcG9ydCB7IExvY2FsZVNlcnZpY2UgfSBmcm9tICcuL2xvY2FsZS5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGVyYW5nZXBpY2tlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBEb0NoZWNrIHtcbiAgICB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmO1xuICAgIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJpdmF0ZSBfY29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuICAgIHByaXZhdGUgX2VsO1xuICAgIHByaXZhdGUgX3JlbmRlcmVyO1xuICAgIHByaXZhdGUgZGlmZmVycztcbiAgICBwcml2YXRlIF9sb2NhbGVTZXJ2aWNlO1xuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcbiAgICBwaWNrZXI6IERhdGVyYW5nZXBpY2tlckNvbXBvbmVudDtcbiAgICBwcml2YXRlIF9vbkNoYW5nZTtcbiAgICBwcml2YXRlIF9vblRvdWNoZWQ7XG4gICAgcHJpdmF0ZSBfdmFsaWRhdG9yQ2hhbmdlO1xuICAgIHByaXZhdGUgX3ZhbHVlO1xuICAgIHByaXZhdGUgbG9jYWxlRGlmZmVyO1xuICAgIG1pbkRhdGU6IF9tb21lbnQuTW9tZW50O1xuICAgIG1heERhdGU6IF9tb21lbnQuTW9tZW50O1xuICAgIGF1dG9BcHBseTogYm9vbGVhbjtcbiAgICBhbHdheXNTaG93Q2FsZW5kYXJzOiBib29sZWFuO1xuICAgIHNob3dDdXN0b21SYW5nZUxhYmVsOiBib29sZWFuO1xuICAgIGxpbmtlZENhbGVuZGFyczogYm9vbGVhbjtcbiAgICBkYXRlTGltaXQ6IG51bWJlcjtcbiAgICBzaW5nbGVEYXRlUGlja2VyOiBib29sZWFuO1xuICAgIHNob3dXZWVrTnVtYmVyczogYm9vbGVhbjtcbiAgICBzaG93SVNPV2Vla051bWJlcnM6IGJvb2xlYW47XG4gICAgc2hvd0Ryb3Bkb3duczogYm9vbGVhbjtcbiAgICBpc0ludmFsaWREYXRlOiBGdW5jdGlvbjtcbiAgICBpc0N1c3RvbURhdGU6IEZ1bmN0aW9uO1xuICAgIGlzVG9vbHRpcERhdGU6IEZ1bmN0aW9uO1xuICAgIHNob3dDbGVhckJ1dHRvbjogYm9vbGVhbjtcbiAgICBjdXN0b21SYW5nZURpcmVjdGlvbjogYm9vbGVhbjtcbiAgICByYW5nZXM6IGFueTtcbiAgICBvcGVuczogc3RyaW5nO1xuICAgIGRyb3BzOiBzdHJpbmc7XG4gICAgZmlyc3RNb250aERheUNsYXNzOiBzdHJpbmc7XG4gICAgbGFzdE1vbnRoRGF5Q2xhc3M6IHN0cmluZztcbiAgICBlbXB0eVdlZWtSb3dDbGFzczogc3RyaW5nO1xuICAgIGZpcnN0RGF5T2ZOZXh0TW9udGhDbGFzczogc3RyaW5nO1xuICAgIGxhc3REYXlPZlByZXZpb3VzTW9udGhDbGFzczogc3RyaW5nO1xuICAgIGtlZXBDYWxlbmRhck9wZW5pbmdXaXRoUmFuZ2U6IGJvb2xlYW47XG4gICAgc2hvd1JhbmdlTGFiZWxPbklucHV0OiBib29sZWFuO1xuICAgIHNob3dDYW5jZWw6IGJvb2xlYW47XG4gICAgbG9ja1N0YXJ0RGF0ZTogYm9vbGVhbjtcbiAgICB0aW1lUGlja2VyOiBCb29sZWFuO1xuICAgIHRpbWVQaWNrZXIyNEhvdXI6IEJvb2xlYW47XG4gICAgdGltZVBpY2tlckluY3JlbWVudDogbnVtYmVyO1xuICAgIHRpbWVQaWNrZXJTZWNvbmRzOiBCb29sZWFuO1xuICAgIGNsb3NlT25BdXRvQXBwbHk6IGJvb2xlYW47XG4gICAgX2xvY2FsZTogTG9jYWxlQ29uZmlnO1xuICAgIHNldCBsb2NhbGUodmFsdWU6IGFueSk7XG4gICAgZ2V0IGxvY2FsZSgpOiBhbnk7XG4gICAgcHJpdmF0ZSBfZW5kS2V5O1xuICAgIHByaXZhdGUgX3N0YXJ0S2V5O1xuICAgIHNldCBzdGFydEtleSh2YWx1ZTogYW55KTtcbiAgICBzZXQgZW5kS2V5KHZhbHVlOiBhbnkpO1xuICAgIG5vdEZvckNoYW5nZXNQcm9wZXJ0eTogQXJyYXk8c3RyaW5nPjtcbiAgICBnZXQgdmFsdWUoKTogYW55O1xuICAgIHNldCB2YWx1ZSh2YWw6IGFueSk7XG4gICAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxPYmplY3Q+O1xuICAgIHJhbmdlQ2xpY2tlZDogRXZlbnRFbWl0dGVyPE9iamVjdD47XG4gICAgZGF0ZXNVcGRhdGVkOiBFdmVudEVtaXR0ZXI8T2JqZWN0PjtcbiAgICBzdGFydERhdGVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8T2JqZWN0PjtcbiAgICBlbmREYXRlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPE9iamVjdD47XG4gICAgY29uc3RydWN0b3Iodmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBfZWw6IEVsZW1lbnRSZWYsIF9yZW5kZXJlcjogUmVuZGVyZXIyLCBkaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIF9sb2NhbGVTZXJ2aWNlOiBMb2NhbGVTZXJ2aWNlLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG9uQmx1cigpOiB2b2lkO1xuICAgIG9wZW4oZXZlbnQ/OiBhbnkpOiB2b2lkO1xuICAgIGhpZGUoZT86IGFueSk6IHZvaWQ7XG4gICAgdG9nZ2xlKGU/OiBhbnkpOiB2b2lkO1xuICAgIGNsZWFyKCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0VmFsdWU7XG4gICAgLyoqXG4gICAgICogU2V0IHBvc2l0aW9uIG9mIHRoZSBjYWxlbmRhclxuICAgICAqL1xuICAgIHNldFBvc2l0aW9uKCk6IHZvaWQ7XG4gICAgaW5wdXRDaGFuZ2VkKGU6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRm9yIGNsaWNrIG91dHNpZGUgb2YgdGhlIGNhbGVuZGFyJ3MgY29udGFpbmVyXG4gICAgICogQHBhcmFtIGV2ZW50IGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIG91dHNpZGVDbGljayhldmVudDogYW55KTogdm9pZDtcbn1cbiJdfQ==