import hljs from 'highlight.js/lib/highlight.js';
import { InjectionToken, Injectable, Inject, Optional, Directive, Input, Output, EventEmitter, NgZone, NgModule, Renderer2, ElementRef, PLATFORM_ID, defineInjectable, inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
import * as Éµngcc0 from '@angular/core';
var HIGHLIGHT_OPTIONS = new InjectionToken('HIGHLIGHT_OPTIONS');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HighlightJS = /** @class */ (function () {
    function HighlightJS(options) {
        var _this = this;
        if (options) {
            // Register HighlightJS languages
            options.languages().map((/**
             * @param {?} language
             * @return {?}
             */
            function (language) {
                return _this.registerLanguage(language.name, language.func);
            }));
            if (options.config) {
                // Set global config if present
                this.configure(options.config);
            }
        }
        // Throw an error if no languages were registered.
        if (this.listLanguages().length < 1) {
            throw new Error('[HighlightJS]: No languages were registered!');
        }
    }
    /**
     * Core highlighting function.
     * @param name Accepts a language name, or an alias
     * @param value A string with the code to highlight.
     * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish
     * even in case of detecting illegal syntax for the language instead of throwing an exception.
     * @param continuation An optional mode stack representing unfinished parsing.
     * When present, the function will restart parsing from this state instead of initializing a new one
     */
    /**
     * Core highlighting function.
     * @param {?} name Accepts a language name, or an alias
     * @param {?} value A string with the code to highlight.
     * @param {?} ignore_illegals When present and evaluates to a true value, forces highlighting to finish
     * even in case of detecting illegal syntax for the language instead of throwing an exception.
     * @param {?=} continuation An optional mode stack representing unfinished parsing.
     * When present, the function will restart parsing from this state instead of initializing a new one
     * @return {?}
     */
    HighlightJS.prototype.highlight = /**
     * Core highlighting function.
     * @param {?} name Accepts a language name, or an alias
     * @param {?} value A string with the code to highlight.
     * @param {?} ignore_illegals When present and evaluates to a true value, forces highlighting to finish
     * even in case of detecting illegal syntax for the language instead of throwing an exception.
     * @param {?=} continuation An optional mode stack representing unfinished parsing.
     * When present, the function will restart parsing from this state instead of initializing a new one
     * @return {?}
     */
    function (name, value, ignore_illegals, continuation) {
        return hljs.highlight(name, value, ignore_illegals, continuation);
    };
    /**
     * Highlighting with language detection.
     * @param value Accepts a string with the code to highlight
     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    /**
     * Highlighting with language detection.
     * @param {?} value Accepts a string with the code to highlight
     * @param {?} languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     * @return {?}
     */
    HighlightJS.prototype.highlightAuto = /**
     * Highlighting with language detection.
     * @param {?} value Accepts a string with the code to highlight
     * @param {?} languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     * @return {?}
     */
    function (value, languageSubset) {
        return hljs.highlightAuto(value, languageSubset);
    };
    /**
     * Post-processing of the highlighted markup.
     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.
     * Options are set globally with configure.
     * @param value Accepts a string with the highlighted markup
     */
    /**
     * Post-processing of the highlighted markup.
     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.
     * Options are set globally with configure.
     * @param {?} value Accepts a string with the highlighted markup
     * @return {?}
     */
    HighlightJS.prototype.fixMarkup = /**
     * Post-processing of the highlighted markup.
     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.
     * Options are set globally with configure.
     * @param {?} value Accepts a string with the highlighted markup
     * @return {?}
     */
    function (value) {
        return hljs.fixMarkup(value);
    };
    /**
     * Applies highlighting to a DOM node containing code.
     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.
     * See the class reference for all available language names and aliases.
     * @param block The element to apply highlight on.
     */
    /**
     * Applies highlighting to a DOM node containing code.
     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.
     * See the class reference for all available language names and aliases.
     * @param {?} block The element to apply highlight on.
     * @return {?}
     */
    HighlightJS.prototype.highlightBlock = /**
     * Applies highlighting to a DOM node containing code.
     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.
     * See the class reference for all available language names and aliases.
     * @param {?} block The element to apply highlight on.
     * @return {?}
     */
    function (block) {
        hljs.highlightBlock(block);
    };
    /**
     * Configures global options:
     * @param config
     */
    /**
     * Configures global options:
     * @param {?} config
     * @return {?}
     */
    HighlightJS.prototype.configure = /**
     * Configures global options:
     * @param {?} config
     * @return {?}
     */
    function (config) {
        hljs.configure(config);
    };
    /**
     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
     */
    /**
     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
     * @return {?}
     */
    HighlightJS.prototype.initHighlighting = /**
     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
     * @return {?}
     */
    function () {
        hljs.initHighlighting();
    };
    /**
     * Adds new language to the library under the specified name. Used mostly internally.
     * @param name A string with the name of the language being registered
     * @param language A function that returns an object which represents the language definition.
     * The function is passed the hljs object to be able to use common regular expressions defined within it.
     */
    /**
     * Adds new language to the library under the specified name. Used mostly internally.
     * @param {?} name A string with the name of the language being registered
     * @param {?} language A function that returns an object which represents the language definition.
     * The function is passed the hljs object to be able to use common regular expressions defined within it.
     * @return {?}
     */
    HighlightJS.prototype.registerLanguage = /**
     * Adds new language to the library under the specified name. Used mostly internally.
     * @param {?} name A string with the name of the language being registered
     * @param {?} language A function that returns an object which represents the language definition.
     * The function is passed the hljs object to be able to use common regular expressions defined within it.
     * @return {?}
     */
    function (name, language) {
        hljs.registerLanguage(name, language);
    };
    /**
     * @return The languages names list.
     */
    /**
     * @return {?} The languages names list.
     */
    HighlightJS.prototype.listLanguages = /**
     * @return {?} The languages names list.
     */
    function () {
        return hljs.listLanguages();
    };
    /**
     * Looks up a language by name or alias.
     * @param name Language name
     * @return The language object if found, undefined otherwise.
     */
    /**
     * Looks up a language by name or alias.
     * @param {?} name Language name
     * @return {?} The language object if found, undefined otherwise.
     */
    HighlightJS.prototype.getLanguage = /**
     * Looks up a language by name or alias.
     * @param {?} name Language name
     * @return {?} The language object if found, undefined otherwise.
     */
    function (name) {
        return hljs.getLanguage(name);
    };
    /** @nocollapse */
    HighlightJS.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HIGHLIGHT_OPTIONS,] }] }
    ]; };
    /** @nocollapse */ HighlightJS.ngInjectableDef = defineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(inject(HIGHLIGHT_OPTIONS, 8)); }, token: HighlightJS, providedIn: "root" });
HighlightJS.Éµfac = function HighlightJS_Factory(t) { return new (t || HighlightJS)(Éµngcc0.ÉµÉµinject(HIGHLIGHT_OPTIONS, 8)); };
HighlightJS.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: HighlightJS, factory: function (t) { return HighlightJS.Éµfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(HighlightJS, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [HIGHLIGHT_OPTIONS]
            }] }]; }, null); })();
    return HighlightJS;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Highlight = /** @class */ (function () {
    function Highlight(_hljs, _zone) {
        this._hljs = _hljs;
        this._zone = _zone;
        /**
         * Stream that emits when code string is highlighted
         */
        this.highlighted = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    Highlight.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['code'] &&
            changes['code'].currentValue !== changes['code'].previousValue) {
            this.highlightElement(this.code, this.languages);
        }
    };
    /**
     * Highlighting with language detection and fix markup.
     * @param value Accepts a string with the code to highlight
     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    /**
     * Highlighting with language detection and fix markup.
     * @param {?} code
     * @param {?=} languages
     * @return {?}
     */
    Highlight.prototype.highlightElement = /**
     * Highlighting with language detection and fix markup.
     * @param {?} code
     * @param {?=} languages
     * @return {?}
     */
    function (code, languages) {
        var _this = this;
        this._zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var res = _this._hljs.highlightAuto(code, languages);
            _this.highlightedCode = res.value;
            _this.highlighted.emit(res);
        }));
    };
    /** @nocollapse */
    Highlight.ctorParameters = function () { return [
        { type: HighlightJS },
        { type: NgZone }
    ]; };
    Highlight.propDecorators = {
        languages: [{ type: Input }],
        code: [{ type: Input, args: ['highlight',] }],
        highlighted: [{ type: Output }]
    };
Highlight.Éµfac = function Highlight_Factory(t) { return new (t || Highlight)(Éµngcc0.ÉµÉµdirectiveInject(HighlightJS), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone)); };
Highlight.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: Highlight, selectors: [["", "highlight", ""]], hostVars: 3, hostBindings: function Highlight_HostBindings(rf, ctx) { if (rf & 2) {
        Éµngcc0.ÉµÉµhostProperty("innerHTML", ctx.highlightedCode, Éµngcc0.ÉµÉµsanitizeHtml);
        Éµngcc0.ÉµÉµclassProp("hljs", true);
    } }, inputs: { languages: "languages", code: ["highlight", "code"] }, outputs: { highlighted: "highlighted" }, features: [Éµngcc0.ÉµÉµNgOnChangesFeature] });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(Highlight, [{
        type: Directive,
        args: [{
                host: {
                    '[class.hljs]': 'true',
                    '[innerHTML]': 'highlightedCode'
                },
                selector: '[highlight]'
            }]
    }], function () { return [{ type: HighlightJS }, { type: Éµngcc0.NgZone }]; }, { highlighted: [{
            type: Output
        }], languages: [{
            type: Input
        }], code: [{
            type: Input,
            args: ['highlight']
        }] }); })();
    return Highlight;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HighlightChildren = /** @class */ (function () {
    function HighlightChildren(_zone, _el, _hljs, _renderer, _platformId) {
        this._zone = _zone;
        this._el = _el;
        this._hljs = _hljs;
        this._renderer = _renderer;
        this._platformId = _platformId;
    }
    /**
     * @return {?}
     */
    HighlightChildren.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this._platformId)) {
            // Subscribe to host element content changes
            this._zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this._observer = new MutationObserver((/**
                 * @return {?}
                 */
                function () {
                    return _this.highlightChildren(_this.selector);
                }));
                _this._observer.observe(_this._el.nativeElement, {
                    childList: true
                });
            }));
        }
    };
    /**
     * Highlight a code block
     * @param el Code block element
     */
    /**
     * Highlight a code block
     * @param {?} el Code block element
     * @return {?}
     */
    HighlightChildren.prototype.highlightElement = /**
     * Highlight a code block
     * @param {?} el Code block element
     * @return {?}
     */
    function (el) {
        this._hljs.highlightBlock(el);
        this._renderer.addClass(el, 'hljs');
    };
    /**
     * Highlight multiple code blocks
     * @param selector elements selector
     */
    /**
     * Highlight multiple code blocks
     * @param {?} selector elements selector
     * @return {?}
     */
    HighlightChildren.prototype.highlightChildren = /**
     * Highlight multiple code blocks
     * @param {?} selector elements selector
     * @return {?}
     */
    function (selector) {
        var _this = this;
        /** @type {?} */
        var elementsToHighlight = this._el.nativeElement.querySelectorAll(selector || 'pre code');
        elementsToHighlight.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            // Highlight element when text is present
            if (element.childNodes.length === 1 &&
                element.childNodes[0].nodeName === '#text') {
                _this.highlightElement(element);
            }
        }));
    };
    /**
     * @return {?}
     */
    HighlightChildren.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._observer) {
            this._observer.disconnect();
        }
    };
    /** @nocollapse */
    HighlightChildren.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: HighlightJS },
        { type: Renderer2 },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    HighlightChildren.propDecorators = {
        selector: [{ type: Input, args: ['highlightChildren',] }]
    };
HighlightChildren.Éµfac = function HighlightChildren_Factory(t) { return new (t || HighlightChildren)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(HighlightJS), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(PLATFORM_ID)); };
HighlightChildren.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: HighlightChildren, selectors: [["", "highlightChildren", ""]], inputs: { selector: ["highlightChildren", "selector"] } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(HighlightChildren, [{
        type: Directive,
        args: [{
                selector: '[highlightChildren]'
            }]
    }], function () { return [{ type: Éµngcc0.NgZone }, { type: Éµngcc0.ElementRef }, { type: HighlightJS }, { type: Éµngcc0.Renderer2 }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { selector: [{
            type: Input,
            args: ['highlightChildren']
        }] }); })();
    return HighlightChildren;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HighlightModule = /** @class */ (function () {
    function HighlightModule() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    HighlightModule.forRoot = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: HighlightModule,
            providers: [
                { provide: HIGHLIGHT_OPTIONS, useValue: options }
            ]
        };
    };
HighlightModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: HighlightModule });
HighlightModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function HighlightModule_Factory(t) { return new (t || HighlightModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(HighlightModule, { declarations: [Highlight,
        HighlightChildren], exports: [Highlight,
        HighlightChildren] }); })();
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(HighlightModule, [{
        type: NgModule,
        args: [{
                declarations: [Highlight, HighlightChildren],
                exports: [Highlight, HighlightChildren]
            }]
    }], function () { return []; }, null); })();
    return HighlightModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { Highlight, HIGHLIGHT_OPTIONS, HighlightModule, HighlightJS, HighlightChildren };

//# sourceMappingURL=ngx-highlightjs.js.map