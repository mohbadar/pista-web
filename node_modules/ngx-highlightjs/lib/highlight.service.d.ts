import { HighlightConfig, HighlightResult, HighlightOptions } from './highlight.model';
import * as ɵngcc0 from '@angular/core';
export declare class HighlightJS {
    constructor(options: HighlightOptions);
    /**
     * Core highlighting function.
     * @param name Accepts a language name, or an alias
     * @param value A string with the code to highlight.
     * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish
     * even in case of detecting illegal syntax for the language instead of throwing an exception.
     * @param continuation An optional mode stack representing unfinished parsing.
     * When present, the function will restart parsing from this state instead of initializing a new one
     */
    highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult;
    /**
     * Highlighting with language detection.
     * @param value Accepts a string with the code to highlight
     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    highlightAuto(value: string, languageSubset: string[]): HighlightResult;
    /**
     * Post-processing of the highlighted markup.
     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.
     * Options are set globally with configure.
     * @param value Accepts a string with the highlighted markup
     */
    fixMarkup(value: string): string;
    /**
     * Applies highlighting to a DOM node containing code.
     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.
     * See the class reference for all available language names and aliases.
     * @param block The element to apply highlight on.
     */
    highlightBlock(block: HTMLElement): void;
    /**
     * Configures global options:
     * @param config
     */
    configure(config: HighlightConfig): void;
    /**
     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
     */
    initHighlighting(): void;
    /**
     * Adds new language to the library under the specified name. Used mostly internally.
     * @param name A string with the name of the language being registered
     * @param language A function that returns an object which represents the language definition.
     * The function is passed the hljs object to be able to use common regular expressions defined within it.
     */
    registerLanguage(name: string, language: Function): void;
    /**
     * @return The languages names list.
     */
    listLanguages(): string[];
    /**
     * Looks up a language by name or alias.
     * @param name Language name
     * @return The language object if found, undefined otherwise.
     */
    getLanguage(name: string): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HighlightJS, [{ optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<HighlightJS>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiaGlnaGxpZ2h0LnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhpZ2hsaWdodENvbmZpZywgSGlnaGxpZ2h0UmVzdWx0LCBIaWdobGlnaHRPcHRpb25zIH0gZnJvbSAnLi9oaWdobGlnaHQubW9kZWwnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBIaWdobGlnaHRKUyB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBIaWdobGlnaHRPcHRpb25zKTtcclxuICAgIC8qKlxyXG4gICAgICogQ29yZSBoaWdobGlnaHRpbmcgZnVuY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBBY2NlcHRzIGEgbGFuZ3VhZ2UgbmFtZSwgb3IgYW4gYWxpYXNcclxuICAgICAqIEBwYXJhbSB2YWx1ZSBBIHN0cmluZyB3aXRoIHRoZSBjb2RlIHRvIGhpZ2hsaWdodC5cclxuICAgICAqIEBwYXJhbSBpZ25vcmVfaWxsZWdhbHMgV2hlbiBwcmVzZW50IGFuZCBldmFsdWF0ZXMgdG8gYSB0cnVlIHZhbHVlLCBmb3JjZXMgaGlnaGxpZ2h0aW5nIHRvIGZpbmlzaFxyXG4gICAgICogZXZlbiBpbiBjYXNlIG9mIGRldGVjdGluZyBpbGxlZ2FsIHN5bnRheCBmb3IgdGhlIGxhbmd1YWdlIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLlxyXG4gICAgICogQHBhcmFtIGNvbnRpbnVhdGlvbiBBbiBvcHRpb25hbCBtb2RlIHN0YWNrIHJlcHJlc2VudGluZyB1bmZpbmlzaGVkIHBhcnNpbmcuXHJcbiAgICAgKiBXaGVuIHByZXNlbnQsIHRoZSBmdW5jdGlvbiB3aWxsIHJlc3RhcnQgcGFyc2luZyBmcm9tIHRoaXMgc3RhdGUgaW5zdGVhZCBvZiBpbml0aWFsaXppbmcgYSBuZXcgb25lXHJcbiAgICAgKi9cclxuICAgIGhpZ2hsaWdodChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGlnbm9yZV9pbGxlZ2FsczogYm9vbGVhbiwgY29udGludWF0aW9uPzogYW55KTogSGlnaGxpZ2h0UmVzdWx0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBIaWdobGlnaHRpbmcgd2l0aCBsYW5ndWFnZSBkZXRlY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgQWNjZXB0cyBhIHN0cmluZyB3aXRoIHRoZSBjb2RlIHRvIGhpZ2hsaWdodFxyXG4gICAgICogQHBhcmFtIGxhbmd1YWdlU3Vic2V0IEFuIG9wdGlvbmFsIGFycmF5IG9mIGxhbmd1YWdlIG5hbWVzIGFuZCBhbGlhc2VzIHJlc3RyaWN0aW5nIGRldGVjdGlvbiB0byBvbmx5IHRob3NlIGxhbmd1YWdlcy5cclxuICAgICAqIFRoZSBzdWJzZXQgY2FuIGFsc28gYmUgc2V0IHdpdGggY29uZmlndXJlLCBidXQgdGhlIGxvY2FsIHBhcmFtZXRlciBvdmVycmlkZXMgdGhlIG9wdGlvbiBpZiBzZXQuXHJcbiAgICAgKi9cclxuICAgIGhpZ2hsaWdodEF1dG8odmFsdWU6IHN0cmluZywgbGFuZ3VhZ2VTdWJzZXQ6IHN0cmluZ1tdKTogSGlnaGxpZ2h0UmVzdWx0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQb3N0LXByb2Nlc3Npbmcgb2YgdGhlIGhpZ2hsaWdodGVkIG1hcmt1cC5cclxuICAgICAqIEN1cnJlbnRseSBjb25zaXN0cyBvZiByZXBsYWNpbmcgaW5kZW50YXRpb24gVEFCIGNoYXJhY3RlcnMgYW5kIHVzaW5nIDxicj4gdGFncyBpbnN0ZWFkIG9mIG5ldy1saW5lIGNoYXJhY3RlcnMuXHJcbiAgICAgKiBPcHRpb25zIGFyZSBzZXQgZ2xvYmFsbHkgd2l0aCBjb25maWd1cmUuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgQWNjZXB0cyBhIHN0cmluZyB3aXRoIHRoZSBoaWdobGlnaHRlZCBtYXJrdXBcclxuICAgICAqL1xyXG4gICAgZml4TWFya3VwKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEFwcGxpZXMgaGlnaGxpZ2h0aW5nIHRvIGEgRE9NIG5vZGUgY29udGFpbmluZyBjb2RlLlxyXG4gICAgICogVGhlIGZ1bmN0aW9uIHVzZXMgbGFuZ3VhZ2UgZGV0ZWN0aW9uIGJ5IGRlZmF1bHQgYnV0IHlvdSBjYW4gc3BlY2lmeSB0aGUgbGFuZ3VhZ2UgaW4gdGhlIGNsYXNzIGF0dHJpYnV0ZSBvZiB0aGUgRE9NIG5vZGUuXHJcbiAgICAgKiBTZWUgdGhlIGNsYXNzIHJlZmVyZW5jZSBmb3IgYWxsIGF2YWlsYWJsZSBsYW5ndWFnZSBuYW1lcyBhbmQgYWxpYXNlcy5cclxuICAgICAqIEBwYXJhbSBibG9jayBUaGUgZWxlbWVudCB0byBhcHBseSBoaWdobGlnaHQgb24uXHJcbiAgICAgKi9cclxuICAgIGhpZ2hsaWdodEJsb2NrKGJsb2NrOiBIVE1MRWxlbWVudCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIENvbmZpZ3VyZXMgZ2xvYmFsIG9wdGlvbnM6XHJcbiAgICAgKiBAcGFyYW0gY29uZmlnXHJcbiAgICAgKi9cclxuICAgIGNvbmZpZ3VyZShjb25maWc6IEhpZ2hsaWdodENvbmZpZyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEFwcGxpZXMgaGlnaGxpZ2h0aW5nIHRvIGFsbCA8cHJlPjxjb2RlPi4uPC9jb2RlPjwvcHJlPiBibG9ja3Mgb24gYSBwYWdlLlxyXG4gICAgICovXHJcbiAgICBpbml0SGlnaGxpZ2h0aW5nKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgbmV3IGxhbmd1YWdlIHRvIHRoZSBsaWJyYXJ5IHVuZGVyIHRoZSBzcGVjaWZpZWQgbmFtZS4gVXNlZCBtb3N0bHkgaW50ZXJuYWxseS5cclxuICAgICAqIEBwYXJhbSBuYW1lIEEgc3RyaW5nIHdpdGggdGhlIG5hbWUgb2YgdGhlIGxhbmd1YWdlIGJlaW5nIHJlZ2lzdGVyZWRcclxuICAgICAqIEBwYXJhbSBsYW5ndWFnZSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBvYmplY3Qgd2hpY2ggcmVwcmVzZW50cyB0aGUgbGFuZ3VhZ2UgZGVmaW5pdGlvbi5cclxuICAgICAqIFRoZSBmdW5jdGlvbiBpcyBwYXNzZWQgdGhlIGhsanMgb2JqZWN0IHRvIGJlIGFibGUgdG8gdXNlIGNvbW1vbiByZWd1bGFyIGV4cHJlc3Npb25zIGRlZmluZWQgd2l0aGluIGl0LlxyXG4gICAgICovXHJcbiAgICByZWdpc3Rlckxhbmd1YWdlKG5hbWU6IHN0cmluZywgbGFuZ3VhZ2U6IEZ1bmN0aW9uKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiBUaGUgbGFuZ3VhZ2VzIG5hbWVzIGxpc3QuXHJcbiAgICAgKi9cclxuICAgIGxpc3RMYW5ndWFnZXMoKTogc3RyaW5nW107XHJcbiAgICAvKipcclxuICAgICAqIExvb2tzIHVwIGEgbGFuZ3VhZ2UgYnkgbmFtZSBvciBhbGlhcy5cclxuICAgICAqIEBwYXJhbSBuYW1lIExhbmd1YWdlIG5hbWVcclxuICAgICAqIEByZXR1cm4gVGhlIGxhbmd1YWdlIG9iamVjdCBpZiBmb3VuZCwgdW5kZWZpbmVkIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgZ2V0TGFuZ3VhZ2UobmFtZTogc3RyaW5nKTogYW55O1xyXG59XHJcbiJdfQ==