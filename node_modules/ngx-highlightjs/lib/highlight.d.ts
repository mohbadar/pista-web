import { OnChanges, SimpleChanges, EventEmitter, NgZone } from '@angular/core';
import { HighlightJS } from './highlight.service';
import { HighlightResult } from './highlight.model';
import * as ɵngcc0 from '@angular/core';
export declare class Highlight implements OnChanges {
    private _hljs;
    private _zone;
    /** Highlighted Code */
    highlightedCode: string;
    /** An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    languages: string[];
    /** Highlight code input */
    code: any;
    /** Stream that emits when code string is highlighted */
    highlighted: EventEmitter<HighlightResult>;
    constructor(_hljs: HighlightJS, _zone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Highlighting with language detection and fix markup.
     * @param value Accepts a string with the code to highlight
     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    highlightElement(code: string, languages?: string[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Highlight, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Highlight, "[highlight]", never, { "languages": "languages"; "code": "highlight"; }, { "highlighted": "highlighted"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmQudHMiLCJzb3VyY2VzIjpbImhpZ2hsaWdodC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEhpZ2hsaWdodEpTIH0gZnJvbSAnLi9oaWdobGlnaHQuc2VydmljZSc7XHJcbmltcG9ydCB7IEhpZ2hsaWdodFJlc3VsdCB9IGZyb20gJy4vaGlnaGxpZ2h0Lm1vZGVsJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSGlnaGxpZ2h0IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICAgIHByaXZhdGUgX2hsanM7XHJcbiAgICBwcml2YXRlIF96b25lO1xyXG4gICAgLyoqIEhpZ2hsaWdodGVkIENvZGUgKi9cclxuICAgIGhpZ2hsaWdodGVkQ29kZTogc3RyaW5nO1xyXG4gICAgLyoqIEFuIG9wdGlvbmFsIGFycmF5IG9mIGxhbmd1YWdlIG5hbWVzIGFuZCBhbGlhc2VzIHJlc3RyaWN0aW5nIGRldGVjdGlvbiB0byBvbmx5IHRob3NlIGxhbmd1YWdlcy5cclxuICAgICAqIFRoZSBzdWJzZXQgY2FuIGFsc28gYmUgc2V0IHdpdGggY29uZmlndXJlLCBidXQgdGhlIGxvY2FsIHBhcmFtZXRlciBvdmVycmlkZXMgdGhlIG9wdGlvbiBpZiBzZXQuXHJcbiAgICAgKi9cclxuICAgIGxhbmd1YWdlczogc3RyaW5nW107XHJcbiAgICAvKiogSGlnaGxpZ2h0IGNvZGUgaW5wdXQgKi9cclxuICAgIGNvZGU6IGFueTtcclxuICAgIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGNvZGUgc3RyaW5nIGlzIGhpZ2hsaWdodGVkICovXHJcbiAgICBoaWdobGlnaHRlZDogRXZlbnRFbWl0dGVyPEhpZ2hsaWdodFJlc3VsdD47XHJcbiAgICBjb25zdHJ1Y3RvcihfaGxqczogSGlnaGxpZ2h0SlMsIF96b25lOiBOZ1pvbmUpO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEhpZ2hsaWdodGluZyB3aXRoIGxhbmd1YWdlIGRldGVjdGlvbiBhbmQgZml4IG1hcmt1cC5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBBY2NlcHRzIGEgc3RyaW5nIHdpdGggdGhlIGNvZGUgdG8gaGlnaGxpZ2h0XHJcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VTdWJzZXQgQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGFuZ3VhZ2UgbmFtZXMgYW5kIGFsaWFzZXMgcmVzdHJpY3RpbmcgZGV0ZWN0aW9uIHRvIG9ubHkgdGhvc2UgbGFuZ3VhZ2VzLlxyXG4gICAgICogVGhlIHN1YnNldCBjYW4gYWxzbyBiZSBzZXQgd2l0aCBjb25maWd1cmUsIGJ1dCB0aGUgbG9jYWwgcGFyYW1ldGVyIG92ZXJyaWRlcyB0aGUgb3B0aW9uIGlmIHNldC5cclxuICAgICAqL1xyXG4gICAgaGlnaGxpZ2h0RWxlbWVudChjb2RlOiBzdHJpbmcsIGxhbmd1YWdlcz86IHN0cmluZ1tdKTogdm9pZDtcclxufVxyXG4iXX0=