{"version":3,"file":"keycloak-angular.js","sources":["ng:/keycloak-angular/lib/core/interfaces/keycloak-event.ts","ng:/keycloak-angular/lib/core/services/keycloak-auth-guard.ts","ng:/keycloak-angular/lib/core/utils/to-promise.ts","ng:/keycloak-angular/lib/core/services/keycloak.service.ts","ng:/keycloak-angular/lib/core/interceptors/keycloak-bearer.interceptor.ts","ng:/keycloak-angular/lib/core/core.module.ts","ng:/keycloak-angular/lib/keycloak-angular.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\n/**\n * Keycloak event types, as described at the keycloak-js documentation:\n * https://www.keycloak.org/docs/latest/securing_apps/index.html#callback-events\n */\nexport enum KeycloakEventType {\n  /**\n   * Called if there was an error during authentication.\n   */\n  OnAuthError,\n  /**\n   * Called if the user is logged out\n   * (will only be called if the session status iframe is enabled, or in Cordova mode).\n   */\n  OnAuthLogout,\n  /**\n   * Called if there was an error while trying to refresh the token.\n   */\n  OnAuthRefreshError,\n  /**\n   * Called when the token is refreshed.\n   */\n  OnAuthRefreshSuccess,\n  /**\n   * Called when a user is successfully authenticated.\n   */\n  OnAuthSuccess,\n  /**\n   * Called when the adapter is initialized.\n   */\n  OnReady,\n  /**\n   * Called when the access token is expired. If a refresh token is available the token\n   * can be refreshed with updateToken, or in cases where it is not (that is, with implicit flow)\n   * you can redirect to login screen to obtain a new access token.\n   */\n  OnTokenExpired\n}\n\n/**\n * Structure of an event triggered by Keycloak, contains it's type\n * and arguments (if any).\n */\nexport interface KeycloakEvent {\n  /**\n   * Event type as described at {@link KeycloakEventType}.\n   */\n  type: KeycloakEventType;\n  /**\n   * Arguments from the keycloak-js event function.\n   */\n  args?: any;\n}\n","/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport { KeycloakService } from './keycloak.service';\n\n/**\n * A simple guard implementation out of the box. This class should be inherited and\n * implemented by the application. The only method that should be implemented is #isAccessAllowed.\n * The reason for this is that the authorization flow is usually not unique, so in this way you will\n * have more freedom to customize your authorization flow.\n */\nexport abstract class KeycloakAuthGuard implements CanActivate {\n  /**\n   * Indicates if the user is authenticated or not.\n   */\n  protected authenticated: boolean;\n  /**\n   * Roles of the logged user. It contains the clientId and realm user roles.\n   */\n  protected roles: string[];\n\n  constructor(protected router: Router, protected keycloakAngular: KeycloakService) {}\n\n  /**\n   * CanActivate checks if the user is logged in and get the full list of roles (REALM + CLIENT)\n   * of the logged user. This values are set to authenticated and roles params.\n   *\n   * @param route\n   * @param state\n   */\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.authenticated = await this.keycloakAngular.isLoggedIn();\n        this.roles = await this.keycloakAngular.getUserRoles(true);\n\n        const result = await this.isAccessAllowed(route, state);\n        resolve(result);\n      } catch (error) {\n        reject('An error happened during access validation. Details:' + error);\n      }\n    });\n  }\n\n  /**\n   * Create your own customized authorization flow in this method. From here you already known\n   * if the user is authenticated (this.authenticated) and the user roles (this.roles).\n   *\n   * Return a UrlTree if the user should be redirected to another route.\n   *\n   * @param route\n   * @param state\n   */\n  abstract isAccessAllowed(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Promise<boolean | UrlTree>;\n}\n","import { KeycloakPromise } from 'keycloak-js';\n\ninterface LegacyKeycloakPromise<T, E> {\n  success(callback: (result: T) => void): LegacyKeycloakPromise<T, E>;\n  error(callback: (result: E) => void): LegacyKeycloakPromise<T, E>;\n}\n\n/**\n * Converts a 'legacy' Keycloak promise to a standardized one.\n *\n * @param originalPromise The Keycloak promise to convert.\n */\nexport function toPromise<T, E>(originalPromise: LegacyKeycloakPromise<T, E> | KeycloakPromise<T, E>) {\n  if (originalPromise instanceof Promise) {\n    return originalPromise;\n  }\n\n  return new Promise<T>((resolve, reject) => {\n    originalPromise.success(resolve);\n    originalPromise.error(reject);\n  });\n}\n","/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\n\nimport { Subject, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// Workaround for rollup library behaviour, as pointed out on issue #1267 (https://github.com/rollup/rollup/issues/1267).\nimport * as Keycloak_ from 'keycloak-js';\nexport const Keycloak = Keycloak_;\n\nimport {\n  ExcludedUrl,\n  ExcludedUrlRegex,\n  KeycloakOptions,\n} from '../interfaces/keycloak-options';\nimport { KeycloakEvent, KeycloakEventType } from '../interfaces/keycloak-event';\nimport { toPromise } from '../utils/to-promise';\n\n/**\n * Service to expose existent methods from the Keycloak JS adapter, adding new\n * functionalities to improve the use of keycloak in Angular v > 4.3 applications.\n *\n * This class should be injected in the application bootstrap, so the same instance will be used\n * along the web application.\n */\n@Injectable()\nexport class KeycloakService {\n  /**\n   * Keycloak-js instance.\n   */\n  private _instance: Keycloak.KeycloakInstance;\n  /**\n   * User profile as KeycloakProfile interface.\n   */\n  private _userProfile: Keycloak.KeycloakProfile;\n  /**\n   * Flag to indicate if the bearer will not be added to the authorization header.\n   */\n  private _enableBearerInterceptor: boolean;\n  /**\n   * When the implicit flow is choosen there must exist a silentRefresh, as there is\n   * no refresh token.\n   */\n  private _silentRefresh: boolean;\n  /**\n   * Indicates that the user profile should be loaded at the keycloak initialization,\n   * just after the login.\n   */\n  private _loadUserProfileAtStartUp: boolean;\n  /**\n   * The bearer prefix that will be appended to the Authorization Header.\n   */\n  private _bearerPrefix: string;\n  /**\n   * Value that will be used as the Authorization Http Header name.\n   */\n  private _authorizationHeaderName: string;\n  /**\n   * The excluded urls patterns that must skip the KeycloakBearerInterceptor.\n   */\n  private _excludedUrls: ExcludedUrlRegex[];\n  /**\n   * Observer for the keycloak events\n   */\n  private _keycloakEvents$: Subject<KeycloakEvent> = new Subject<\n    KeycloakEvent\n  >();\n\n  /**\n   * Binds the keycloak-js events to the keycloakEvents Subject\n   * which is a good way to monitor for changes, if needed.\n   *\n   * The keycloakEvents returns the keycloak-js event type and any\n   * argument if the source function provides any.\n   */\n  private bindsKeycloakEvents(): void {\n    this._instance.onAuthError = (errorData) => {\n      this._keycloakEvents$.next({\n        args: errorData,\n        type: KeycloakEventType.OnAuthError,\n      });\n    };\n\n    this._instance.onAuthLogout = () => {\n      this._keycloakEvents$.next({ type: KeycloakEventType.OnAuthLogout });\n    };\n\n    this._instance.onAuthRefreshSuccess = () => {\n      this._keycloakEvents$.next({\n        type: KeycloakEventType.OnAuthRefreshSuccess,\n      });\n    };\n\n    this._instance.onAuthRefreshError = () => {\n      this._keycloakEvents$.next({\n        type: KeycloakEventType.OnAuthRefreshError,\n      });\n    };\n\n    this._instance.onAuthSuccess = () => {\n      this._keycloakEvents$.next({ type: KeycloakEventType.OnAuthSuccess });\n    };\n\n    this._instance.onTokenExpired = () => {\n      this._keycloakEvents$.next({\n        type: KeycloakEventType.OnTokenExpired,\n      });\n    };\n\n    this._instance.onReady = (authenticated) => {\n      this._keycloakEvents$.next({\n        args: authenticated,\n        type: KeycloakEventType.OnReady,\n      });\n    };\n  }\n\n  /**\n   * Loads all bearerExcludedUrl content in a uniform type: ExcludedUrl,\n   * so it becomes easier to handle.\n   *\n   * @param bearerExcludedUrls array of strings or ExcludedUrl that includes\n   * the url and HttpMethod.\n   */\n  private loadExcludedUrls(\n    bearerExcludedUrls: (string | ExcludedUrl)[]\n  ): ExcludedUrlRegex[] {\n    const excludedUrls: ExcludedUrlRegex[] = [];\n    for (const item of bearerExcludedUrls) {\n      let excludedUrl: ExcludedUrlRegex;\n      if (typeof item === 'string') {\n        excludedUrl = { urlPattern: new RegExp(item, 'i'), httpMethods: [] };\n      } else {\n        excludedUrl = {\n          urlPattern: new RegExp(item.url, 'i'),\n          httpMethods: item.httpMethods,\n        };\n      }\n      excludedUrls.push(excludedUrl);\n    }\n    return excludedUrls;\n  }\n\n  /**\n   * Handles the class values initialization.\n   *\n   * @param options\n   */\n  private initServiceValues({\n    enableBearerInterceptor = true,\n    loadUserProfileAtStartUp = true,\n    bearerExcludedUrls = [],\n    authorizationHeaderName = 'Authorization',\n    bearerPrefix = 'bearer',\n    initOptions,\n  }: KeycloakOptions): void {\n    this._enableBearerInterceptor = enableBearerInterceptor;\n    this._loadUserProfileAtStartUp = loadUserProfileAtStartUp;\n    this._authorizationHeaderName = authorizationHeaderName;\n    this._bearerPrefix = bearerPrefix.trim().concat(' ');\n    this._excludedUrls = this.loadExcludedUrls(bearerExcludedUrls);\n    this._silentRefresh = initOptions ? initOptions.flow === 'implicit' : false;\n  }\n\n  /**\n   * Keycloak initialization. It should be called to initialize the adapter.\n   * Options is a object with 2 main parameters: config and initOptions. The first one\n   * will be used to create the Keycloak instance. The second one are options to initialize the\n   * keycloak instance.\n   *\n   * @param options\n   * Config: may be a string representing the keycloak URI or an object with the\n   * following content:\n   * - url: Keycloak json URL\n   * - realm: realm name\n   * - clientId: client id\n   *\n   * initOptions:\n   * Options to initialize the Keycloak adapter, matches the options as provided by Keycloak itself.\n   *\n   * enableBearerInterceptor:\n   * Flag to indicate if the bearer will added to the authorization header.\n   *\n   * loadUserProfileInStartUp:\n   * Indicates that the user profile should be loaded at the keycloak initialization,\n   * just after the login.\n   *\n   * bearerExcludedUrls:\n   * String Array to exclude the urls that should not have the Authorization Header automatically\n   * added.\n   *\n   * authorizationHeaderName:\n   * This value will be used as the Authorization Http Header name.\n   *\n   * bearerPrefix:\n   * This value will be included in the Authorization Http Header param.\n   *\n   * @returns\n   * A Promise with a boolean indicating if the initialization was successful.\n   */\n  public async init(options: KeycloakOptions = {}) {\n    this.initServiceValues(options);\n    const { config, initOptions } = options;\n\n    this._instance = Keycloak(config);\n    this.bindsKeycloakEvents();\n\n    const authenticated = await toPromise(this._instance.init(initOptions));\n\n    if (authenticated && this._loadUserProfileAtStartUp) {\n      await this.loadUserProfile();\n    }\n\n    return authenticated;\n  }\n\n  /**\n   * Redirects to login form on (options is an optional object with redirectUri and/or\n   * prompt fields).\n   *\n   * @param options\n   * Object, where:\n   *  - redirectUri: Specifies the uri to redirect to after login.\n   *  - prompt:By default the login screen is displayed if the user is not logged-in to Keycloak.\n   * To only authenticate to the application if the user is already logged-in and not display the\n   * login page if the user is not logged-in, set this option to none. To always require\n   * re-authentication and ignore SSO, set this option to login .\n   *  - maxAge: Used just if user is already authenticated. Specifies maximum time since the\n   * authentication of user happened. If user is already authenticated for longer time than\n   * maxAge, the SSO is ignored and he will need to re-authenticate again.\n   *  - loginHint: Used to pre-fill the username/email field on the login form.\n   *  - action: If value is 'register' then user is redirected to registration page, otherwise to\n   * login page.\n   *  - locale: Specifies the desired locale for the UI.\n   * @returns\n   * A void Promise if the login is successful and after the user profile loading.\n   */\n  public async login(options: Keycloak.KeycloakLoginOptions = {}) {\n    await toPromise(this._instance.login(options));\n\n    if (this._loadUserProfileAtStartUp) {\n      await this.loadUserProfile();\n    }\n  }\n\n  /**\n   * Redirects to logout.\n   *\n   * @param redirectUri\n   * Specifies the uri to redirect to after logout.\n   * @returns\n   * A void Promise if the logout was successful, cleaning also the userProfile.\n   */\n  public async logout(redirectUri?: string) {\n    const options = {\n      redirectUri,\n    };\n\n    await toPromise(this._instance.logout(options));\n    this._userProfile = undefined;\n  }\n\n  /**\n   * Redirects to registration form. Shortcut for login with option\n   * action = 'register'. Options are same as for the login method but 'action' is set to\n   * 'register'.\n   *\n   * @param options\n   * login options\n   * @returns\n   * A void Promise if the register flow was successful.\n   */\n  public async register(\n    options: Keycloak.KeycloakLoginOptions = { action: 'register' }\n  ) {\n    await toPromise(this._instance.register(options));\n  }\n\n  /**\n   * Check if the user has access to the specified role. It will look for roles in\n   * realm and clientId, but will not check if the user is logged in for better performance.\n   *\n   * @param role\n   * role name\n   * @param resource\n   * resource name If not specified, `clientId` is used\n   * @returns\n   * A boolean meaning if the user has the specified Role.\n   */\n  isUserInRole(role: string, resource?: string): boolean {\n    let hasRole: boolean;\n    hasRole = this._instance.hasResourceRole(role, resource);\n    if (!hasRole) {\n      hasRole = this._instance.hasRealmRole(role);\n    }\n    return hasRole;\n  }\n\n  /**\n   * Return the roles of the logged user. The allRoles parameter, with default value\n   * true, will return the clientId and realm roles associated with the logged user. If set to false\n   * it will only return the user roles associated with the clientId.\n   *\n   * @param allRoles\n   * Flag to set if all roles should be returned.(Optional: default value is true)\n   * @returns\n   * Array of Roles associated with the logged user.\n   */\n  getUserRoles(allRoles: boolean = true): string[] {\n    let roles: string[] = [];\n    if (this._instance.resourceAccess) {\n      for (const key in this._instance.resourceAccess) {\n        if (this._instance.resourceAccess.hasOwnProperty(key)) {\n          const resourceAccess: any = this._instance.resourceAccess[key];\n          const clientRoles = resourceAccess['roles'] || [];\n          roles = roles.concat(clientRoles);\n        }\n      }\n    }\n    if (allRoles && this._instance.realmAccess) {\n      const realmRoles = this._instance.realmAccess['roles'] || [];\n      roles.push(...realmRoles);\n    }\n    return roles;\n  }\n\n  /**\n   * Check if user is logged in.\n   *\n   * @returns\n   * A boolean that indicates if the user is logged in.\n   */\n  async isLoggedIn(): Promise<boolean> {\n    try {\n      if (!this._instance.authenticated) {\n        return false;\n      }\n      await this.updateToken(20);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Returns true if the token has less than minValidity seconds left before\n   * it expires.\n   *\n   * @param minValidity\n   * Seconds left. (minValidity) is optional. Default value is 0.\n   * @returns\n   * Boolean indicating if the token is expired.\n   */\n  isTokenExpired(minValidity: number = 0): boolean {\n    return this._instance.isTokenExpired(minValidity);\n  }\n\n  /**\n   * If the token expires within minValidity seconds the token is refreshed. If the\n   * session status iframe is enabled, the session status is also checked.\n   * Returns a promise telling if the token was refreshed or not. If the session is not active\n   * anymore, the promise is rejected.\n   *\n   * @param minValidity\n   * Seconds left. (minValidity is optional, if not specified 5 is used)\n   * @returns\n   * Promise with a boolean indicating if the token was succesfully updated.\n   */\n  public async updateToken(minValidity = 5) {\n    // TODO: this is a workaround until the silent refresh (issue #43)\n    // is not implemented, avoiding the redirect loop.\n    if (this._silentRefresh) {\n      if (this.isTokenExpired()) {\n        throw new Error(\n          'Failed to refresh the token, or the session is expired'\n        );\n      }\n\n      return true;\n    }\n\n    if (!this._instance) {\n      throw new Error('Keycloak Angular library is not initialized.');\n    }\n\n    return toPromise(this._instance.updateToken(minValidity));\n  }\n\n  /**\n   * Loads the user profile.\n   * Returns promise to set functions to be invoked if the profile was loaded\n   * successfully, or if the profile could not be loaded.\n   *\n   * @param forceReload\n   * If true will force the loadUserProfile even if its already loaded.\n   * @returns\n   * A promise with the KeycloakProfile data loaded.\n   */\n  public async loadUserProfile(forceReload = false) {\n    if (this._userProfile && !forceReload) {\n      return this._userProfile;\n    }\n\n    if (!this._instance.authenticated) {\n      throw new Error(\n        'The user profile was not loaded as the user is not logged in.'\n      );\n    }\n\n    return (this._userProfile = await toPromise(\n      this._instance.loadUserProfile()\n    ));\n  }\n\n  /**\n   * Returns the authenticated token, calling updateToken to get a refreshed one if\n   * necessary. If the session is expired and the forceLogin flag is set to true,\n   * this method calls the login method for a new login, otherwise rejects.\n   *\n   * @param forceLogin\n   * Flag whether a login should be enforced if the session is expired.\n   * @returns\n   * Promise with the generated token.\n   */\n  async getToken(forceLogin = true): Promise<string> {\n    try {\n      await this.updateToken(10);\n      return this._instance.token;\n    } catch (error) {\n      if (forceLogin) {\n        this.login();\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Returns the logged username.\n   *\n   * @returns\n   * The logged username.\n   */\n  public getUsername() {\n    if (!this._userProfile) {\n      throw new Error('User not logged in or user profile was not loaded.');\n    }\n\n    return this._userProfile.username;\n  }\n\n  /**\n   * Clear authentication state, including tokens. This can be useful if application\n   * has detected the session was expired, for example if updating token fails.\n   * Invoking this results in onAuthLogout callback listener being invoked.\n   */\n  clearToken(): void {\n    this._instance.clearToken();\n  }\n\n  /**\n   * Adds a valid token in header. The key & value format is:\n   * Authorization Bearer <token>.\n   * If the headers param is undefined it will create the Angular headers object.\n   *\n   * @param headers\n   * Updated header with Authorization and Keycloak token.\n   * @returns\n   * An observable with with the HTTP Authorization header and the current token.\n   */\n  public addTokenToHeader(headers: HttpHeaders = new HttpHeaders()) {\n    return from(this.getToken()).pipe(\n      map((token) =>\n        headers.set(this._authorizationHeaderName, this._bearerPrefix + token)\n      )\n    );\n  }\n\n  /**\n   * Returns the original Keycloak instance, if you need any customization that\n   * this Angular service does not support yet. Use with caution.\n   *\n   * @returns\n   * The KeycloakInstance from keycloak-js.\n   */\n  getKeycloakInstance(): Keycloak.KeycloakInstance {\n    return this._instance;\n  }\n\n  /**\n   * Returns the excluded URLs that should not be considered by\n   * the http interceptor which automatically adds the authorization header in the Http Request.\n   *\n   * @returns\n   * The excluded urls that must not be intercepted by the KeycloakBearerInterceptor.\n   */\n  get excludedUrls(): ExcludedUrlRegex[] {\n    return this._excludedUrls;\n  }\n\n  /**\n   * Flag to indicate if the bearer will be added to the authorization header.\n   *\n   * @returns\n   * Returns if the bearer interceptor was set to be disabled.\n   */\n  get enableBearerInterceptor(): boolean {\n    return this._enableBearerInterceptor;\n  }\n\n  /**\n   * Keycloak subject to monitor the events triggered by keycloak-js.\n   * The following events as available (as described at keycloak docs -\n   * https://www.keycloak.org/docs/latest/securing_apps/index.html#callback-events):\n   * - OnAuthError\n   * - OnAuthLogout\n   * - OnAuthRefreshError\n   * - OnAuthRefreshSuccess\n   * - OnAuthSuccess\n   * - OnReady\n   * - OnTokenExpire\n   * In each occurrence of any of these, this subject will return the event type,\n   * described at {@link KeycloakEventType} enum and the function args from the keycloak-js\n   * if provided any.\n   *\n   * @returns\n   * A subject with the {@link KeycloakEvent} which describes the event type and attaches the\n   * function args.\n   */\n  get keycloakEvents$(): Subject<KeycloakEvent> {\n    return this._keycloakEvents$;\n  }\n}\n","/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent\n} from '@angular/common/http';\n\nimport { Observable, from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { KeycloakService } from '../services/keycloak.service';\nimport { ExcludedUrlRegex } from '../interfaces/keycloak-options';\n\n/**\n * This interceptor includes the bearer by default in all HttpClient requests.\n *\n * If you need to exclude some URLs from adding the bearer, please, take a look\n * at the {@link KeycloakOptions} bearerExcludedUrls property.\n */\n@Injectable()\nexport class KeycloakBearerInterceptor implements HttpInterceptor {\n  constructor(private keycloak: KeycloakService) {}\n\n  /**\n   * Checks if the url is excluded from having the Bearer Authorization\n   * header added.\n   *\n   * @param req http request from @angular http module.\n   * @param excludedUrlRegex contains the url pattern and the http methods,\n   * excluded from adding the bearer at the Http Request.\n   */\n  private isUrlExcluded(\n    { method, url }: HttpRequest<any>,\n    { urlPattern, httpMethods }: ExcludedUrlRegex\n  ): boolean {\n    const httpTest =\n      httpMethods.length === 0 ||\n      httpMethods.join().indexOf(method.toUpperCase()) > -1;\n\n    const urlTest = urlPattern.test(url);\n\n    return httpTest && urlTest;\n  }\n\n  /**\n   * Intercept implementation that checks if the request url matches the excludedUrls.\n   * If not, adds the Authorization header to the request if the user is logged in.\n   *\n   * @param req\n   * @param next\n   */\n  public intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const { enableBearerInterceptor, excludedUrls } = this.keycloak;\n    if (!enableBearerInterceptor) {\n      return next.handle(req);\n    }\n\n    const shallPass: boolean =\n      excludedUrls.findIndex(item => this.isUrlExcluded(req, item)) > -1;\n    if (shallPass) {\n      return next.handle(req);\n    }\n\n    return from(this.keycloak.isLoggedIn()).pipe(\n      mergeMap((loggedIn: boolean) => loggedIn\n        ? this.handleRequestWithTokenHeader(req, next)\n        : next.handle(req))\n    );\n  }\n\n  /**\n   * Adds the token of the current user to the Authorization header\n   *\n   * @param req\n   * @param next\n   */\n  private handleRequestWithTokenHeader(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.keycloak.addTokenToHeader(req.headers).pipe(\n      mergeMap(headersWithBearer => {\n        const kcReq = req.clone({ headers: headersWithBearer });\n        return next.handle(kcReq);\n      })\n    );\n  }\n}\n","/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { KeycloakService } from './services/keycloak.service';\nimport { KeycloakBearerInterceptor } from './interceptors/keycloak-bearer.interceptor';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    KeycloakService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: KeycloakBearerInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class CoreModule {}\n","/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\n\nimport { CoreModule } from './core/core.module';\n\n@NgModule({\n  imports: [CoreModule]\n})\nexport class KeycloakAngularModule {}\n"]}