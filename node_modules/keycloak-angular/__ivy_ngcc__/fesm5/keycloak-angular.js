import { __awaiter, __generator, __values, __spread, __decorate, __metadata } from 'tslib';
import { Injectable, NgModule } from '@angular/core';
import { HttpHeaders, HTTP_INTERCEPTORS } from '@angular/common/http';
import { Subject, from } from 'rxjs';
import { map, mergeMap } from 'rxjs/operators';
import * as Keycloak_ from 'keycloak-js';
import { CommonModule } from '@angular/common';

import * as Éµngcc0 from '@angular/core';
var KeycloakEventType;
(function (KeycloakEventType) {
    KeycloakEventType[KeycloakEventType["OnAuthError"] = 0] = "OnAuthError";
    KeycloakEventType[KeycloakEventType["OnAuthLogout"] = 1] = "OnAuthLogout";
    KeycloakEventType[KeycloakEventType["OnAuthRefreshError"] = 2] = "OnAuthRefreshError";
    KeycloakEventType[KeycloakEventType["OnAuthRefreshSuccess"] = 3] = "OnAuthRefreshSuccess";
    KeycloakEventType[KeycloakEventType["OnAuthSuccess"] = 4] = "OnAuthSuccess";
    KeycloakEventType[KeycloakEventType["OnReady"] = 5] = "OnReady";
    KeycloakEventType[KeycloakEventType["OnTokenExpired"] = 6] = "OnTokenExpired";
})(KeycloakEventType || (KeycloakEventType = {}));

var KeycloakAuthGuard = (function () {
    function KeycloakAuthGuard(router, keycloakAngular) {
        this.router = router;
        this.keycloakAngular = keycloakAngular;
    }
    KeycloakAuthGuard.prototype.canActivate = function (route, state) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b, result, error_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 4, , 5]);
                        _a = this;
                        return [4, this.keycloakAngular.isLoggedIn()];
                    case 1:
                        _a.authenticated = _c.sent();
                        _b = this;
                        return [4, this.keycloakAngular.getUserRoles(true)];
                    case 2:
                        _b.roles = _c.sent();
                        return [4, this.isAccessAllowed(route, state)];
                    case 3:
                        result = _c.sent();
                        resolve(result);
                        return [3, 5];
                    case 4:
                        error_1 = _c.sent();
                        reject('An error happened during access validation. Details:' + error_1);
                        return [3, 5];
                    case 5: return [2];
                }
            });
        }); });
    };
    return KeycloakAuthGuard;
}());

function toPromise(originalPromise) {
    if (originalPromise instanceof Promise) {
        return originalPromise;
    }
    return new Promise(function (resolve, reject) {
        originalPromise.success(resolve);
        originalPromise.error(reject);
    });
}

var Keycloak = Keycloak_;
var KeycloakService = (function () {
    function KeycloakService() {
        this._keycloakEvents$ = new Subject();
    }
    KeycloakService.prototype.bindsKeycloakEvents = function () {
        var _this = this;
        this._instance.onAuthError = function (errorData) {
            _this._keycloakEvents$.next({
                args: errorData,
                type: KeycloakEventType.OnAuthError,
            });
        };
        this._instance.onAuthLogout = function () {
            _this._keycloakEvents$.next({ type: KeycloakEventType.OnAuthLogout });
        };
        this._instance.onAuthRefreshSuccess = function () {
            _this._keycloakEvents$.next({
                type: KeycloakEventType.OnAuthRefreshSuccess,
            });
        };
        this._instance.onAuthRefreshError = function () {
            _this._keycloakEvents$.next({
                type: KeycloakEventType.OnAuthRefreshError,
            });
        };
        this._instance.onAuthSuccess = function () {
            _this._keycloakEvents$.next({ type: KeycloakEventType.OnAuthSuccess });
        };
        this._instance.onTokenExpired = function () {
            _this._keycloakEvents$.next({
                type: KeycloakEventType.OnTokenExpired,
            });
        };
        this._instance.onReady = function (authenticated) {
            _this._keycloakEvents$.next({
                args: authenticated,
                type: KeycloakEventType.OnReady,
            });
        };
    };
    KeycloakService.prototype.loadExcludedUrls = function (bearerExcludedUrls) {
        var e_1, _a;
        var excludedUrls = [];
        try {
            for (var bearerExcludedUrls_1 = __values(bearerExcludedUrls), bearerExcludedUrls_1_1 = bearerExcludedUrls_1.next(); !bearerExcludedUrls_1_1.done; bearerExcludedUrls_1_1 = bearerExcludedUrls_1.next()) {
                var item = bearerExcludedUrls_1_1.value;
                var excludedUrl = void 0;
                if (typeof item === 'string') {
                    excludedUrl = { urlPattern: new RegExp(item, 'i'), httpMethods: [] };
                }
                else {
                    excludedUrl = {
                        urlPattern: new RegExp(item.url, 'i'),
                        httpMethods: item.httpMethods,
                    };
                }
                excludedUrls.push(excludedUrl);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (bearerExcludedUrls_1_1 && !bearerExcludedUrls_1_1.done && (_a = bearerExcludedUrls_1.return)) _a.call(bearerExcludedUrls_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return excludedUrls;
    };
    KeycloakService.prototype.initServiceValues = function (_a) {
        var _b = _a.enableBearerInterceptor, enableBearerInterceptor = _b === void 0 ? true : _b, _c = _a.loadUserProfileAtStartUp, loadUserProfileAtStartUp = _c === void 0 ? true : _c, _d = _a.bearerExcludedUrls, bearerExcludedUrls = _d === void 0 ? [] : _d, _e = _a.authorizationHeaderName, authorizationHeaderName = _e === void 0 ? 'Authorization' : _e, _f = _a.bearerPrefix, bearerPrefix = _f === void 0 ? 'bearer' : _f, initOptions = _a.initOptions;
        this._enableBearerInterceptor = enableBearerInterceptor;
        this._loadUserProfileAtStartUp = loadUserProfileAtStartUp;
        this._authorizationHeaderName = authorizationHeaderName;
        this._bearerPrefix = bearerPrefix.trim().concat(' ');
        this._excludedUrls = this.loadExcludedUrls(bearerExcludedUrls);
        this._silentRefresh = initOptions ? initOptions.flow === 'implicit' : false;
    };
    KeycloakService.prototype.init = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var config, initOptions, authenticated;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.initServiceValues(options);
                        config = options.config, initOptions = options.initOptions;
                        this._instance = Keycloak(config);
                        this.bindsKeycloakEvents();
                        return [4, toPromise(this._instance.init(initOptions))];
                    case 1:
                        authenticated = _a.sent();
                        if (!(authenticated && this._loadUserProfileAtStartUp)) return [3, 3];
                        return [4, this.loadUserProfile()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2, authenticated];
                }
            });
        });
    };
    KeycloakService.prototype.login = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, toPromise(this._instance.login(options))];
                    case 1:
                        _a.sent();
                        if (!this._loadUserProfileAtStartUp) return [3, 3];
                        return [4, this.loadUserProfile()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    KeycloakService.prototype.logout = function (redirectUri) {
        return __awaiter(this, void 0, void 0, function () {
            var options;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            redirectUri: redirectUri,
                        };
                        return [4, toPromise(this._instance.logout(options))];
                    case 1:
                        _a.sent();
                        this._userProfile = undefined;
                        return [2];
                }
            });
        });
    };
    KeycloakService.prototype.register = function (options) {
        if (options === void 0) { options = { action: 'register' }; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, toPromise(this._instance.register(options))];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    KeycloakService.prototype.isUserInRole = function (role, resource) {
        var hasRole;
        hasRole = this._instance.hasResourceRole(role, resource);
        if (!hasRole) {
            hasRole = this._instance.hasRealmRole(role);
        }
        return hasRole;
    };
    KeycloakService.prototype.getUserRoles = function (allRoles) {
        if (allRoles === void 0) { allRoles = true; }
        var roles = [];
        if (this._instance.resourceAccess) {
            for (var key in this._instance.resourceAccess) {
                if (this._instance.resourceAccess.hasOwnProperty(key)) {
                    var resourceAccess = this._instance.resourceAccess[key];
                    var clientRoles = resourceAccess['roles'] || [];
                    roles = roles.concat(clientRoles);
                }
            }
        }
        if (allRoles && this._instance.realmAccess) {
            var realmRoles = this._instance.realmAccess['roles'] || [];
            roles.push.apply(roles, __spread(realmRoles));
        }
        return roles;
    };
    KeycloakService.prototype.isLoggedIn = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        if (!this._instance.authenticated) {
                            return [2, false];
                        }
                        return [4, this.updateToken(20)];
                    case 1:
                        _a.sent();
                        return [2, true];
                    case 2:
                        error_1 = _a.sent();
                        return [2, false];
                    case 3: return [2];
                }
            });
        });
    };
    KeycloakService.prototype.isTokenExpired = function (minValidity) {
        if (minValidity === void 0) { minValidity = 0; }
        return this._instance.isTokenExpired(minValidity);
    };
    KeycloakService.prototype.updateToken = function (minValidity) {
        if (minValidity === void 0) { minValidity = 5; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._silentRefresh) {
                    if (this.isTokenExpired()) {
                        throw new Error('Failed to refresh the token, or the session is expired');
                    }
                    return [2, true];
                }
                if (!this._instance) {
                    throw new Error('Keycloak Angular library is not initialized.');
                }
                return [2, toPromise(this._instance.updateToken(minValidity))];
            });
        });
    };
    KeycloakService.prototype.loadUserProfile = function (forceReload) {
        if (forceReload === void 0) { forceReload = false; }
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._userProfile && !forceReload) {
                            return [2, this._userProfile];
                        }
                        if (!this._instance.authenticated) {
                            throw new Error('The user profile was not loaded as the user is not logged in.');
                        }
                        _a = this;
                        return [4, toPromise(this._instance.loadUserProfile())];
                    case 1: return [2, (_a._userProfile = _b.sent())];
                }
            });
        });
    };
    KeycloakService.prototype.getToken = function (forceLogin) {
        if (forceLogin === void 0) { forceLogin = true; }
        return __awaiter(this, void 0, void 0, function () {
            var error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this.updateToken(10)];
                    case 1:
                        _a.sent();
                        return [2, this._instance.token];
                    case 2:
                        error_2 = _a.sent();
                        if (forceLogin) {
                            this.login();
                        }
                        else {
                            throw error_2;
                        }
                        return [3, 3];
                    case 3: return [2];
                }
            });
        });
    };
    KeycloakService.prototype.getUsername = function () {
        if (!this._userProfile) {
            throw new Error('User not logged in or user profile was not loaded.');
        }
        return this._userProfile.username;
    };
    KeycloakService.prototype.clearToken = function () {
        this._instance.clearToken();
    };
    KeycloakService.prototype.addTokenToHeader = function (headers) {
        var _this = this;
        if (headers === void 0) { headers = new HttpHeaders(); }
        return from(this.getToken()).pipe(map(function (token) {
            return headers.set(_this._authorizationHeaderName, _this._bearerPrefix + token);
        }));
    };
    KeycloakService.prototype.getKeycloakInstance = function () {
        return this._instance;
    };
    Object.defineProperty(KeycloakService.prototype, "excludedUrls", {
        get: function () {
            return this._excludedUrls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeycloakService.prototype, "enableBearerInterceptor", {
        get: function () {
            return this._enableBearerInterceptor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeycloakService.prototype, "keycloakEvents$", {
        get: function () {
            return this._keycloakEvents$;
        },
        enumerable: true,
        configurable: true
    });
KeycloakService.Éµfac = function KeycloakService_Factory(t) { return new (t || KeycloakService)(); };
KeycloakService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: KeycloakService, factory: function (t) { return KeycloakService.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(KeycloakService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return KeycloakService;
}());

var KeycloakBearerInterceptor = (function () {
    function KeycloakBearerInterceptor(keycloak) {
        this.keycloak = keycloak;
    }
    KeycloakBearerInterceptor.prototype.isUrlExcluded = function (_a, _b) {
        var method = _a.method, url = _a.url;
        var urlPattern = _b.urlPattern, httpMethods = _b.httpMethods;
        var httpTest = httpMethods.length === 0 ||
            httpMethods.join().indexOf(method.toUpperCase()) > -1;
        var urlTest = urlPattern.test(url);
        return httpTest && urlTest;
    };
    KeycloakBearerInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        var _a = this.keycloak, enableBearerInterceptor = _a.enableBearerInterceptor, excludedUrls = _a.excludedUrls;
        if (!enableBearerInterceptor) {
            return next.handle(req);
        }
        var shallPass = excludedUrls.findIndex(function (item) { return _this.isUrlExcluded(req, item); }) > -1;
        if (shallPass) {
            return next.handle(req);
        }
        return from(this.keycloak.isLoggedIn()).pipe(mergeMap(function (loggedIn) { return loggedIn
            ? _this.handleRequestWithTokenHeader(req, next)
            : next.handle(req); }));
    };
    KeycloakBearerInterceptor.prototype.handleRequestWithTokenHeader = function (req, next) {
        return this.keycloak.addTokenToHeader(req.headers).pipe(mergeMap(function (headersWithBearer) {
            var kcReq = req.clone({ headers: headersWithBearer });
            return next.handle(kcReq);
        }));
    };
    KeycloakBearerInterceptor.ctorParameters = function () { return [
        { type: KeycloakService }
    ]; };
    KeycloakBearerInterceptor = __decorate([ __metadata("design:paramtypes", [KeycloakService])
    ], KeycloakBearerInterceptor);
KeycloakBearerInterceptor.Éµfac = function KeycloakBearerInterceptor_Factory(t) { return new (t || KeycloakBearerInterceptor)(Éµngcc0.ÉµÉµinject(KeycloakService)); };
KeycloakBearerInterceptor.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: KeycloakBearerInterceptor, factory: function (t) { return KeycloakBearerInterceptor.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(KeycloakBearerInterceptor, [{
        type: Injectable
    }], function () { return [{ type: KeycloakService }]; }, null); })();
    return KeycloakBearerInterceptor;
}());

var CoreModule = (function () {
    function CoreModule() {
    }
CoreModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: CoreModule });
CoreModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function CoreModule_Factory(t) { return new (t || CoreModule)(); }, providers: [
        KeycloakService,
        {
            provide: HTTP_INTERCEPTORS,
            useClass: KeycloakBearerInterceptor,
            multi: true
        }
    ], imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(CoreModule, { imports: function () { return [CommonModule]; } }); })();
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(CoreModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                providers: [
                    KeycloakService,
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: KeycloakBearerInterceptor,
                        multi: true
                    }
                ]
            }]
    }], function () { return []; }, null); })();
    return CoreModule;
}());

var KeycloakAngularModule = (function () {
    function KeycloakAngularModule() {
    }
KeycloakAngularModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: KeycloakAngularModule });
KeycloakAngularModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function KeycloakAngularModule_Factory(t) { return new (t || KeycloakAngularModule)(); }, imports: [[CoreModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(KeycloakAngularModule, { imports: [CoreModule] }); })();
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(KeycloakAngularModule, [{
        type: NgModule,
        args: [{
                imports: [CoreModule]
            }]
    }], function () { return []; }, null); })();
    return KeycloakAngularModule;
}());

export { CoreModule, KeycloakAngularModule, KeycloakAuthGuard, KeycloakBearerInterceptor, KeycloakEventType, KeycloakService };

//# sourceMappingURL=keycloak-angular.js.map