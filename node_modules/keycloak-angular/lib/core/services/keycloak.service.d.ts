import { HttpHeaders } from '@angular/common/http';
import { Subject } from 'rxjs';
import * as Keycloak_ from 'keycloak-js';
import * as ɵngcc0 from '@angular/core';
export declare const Keycloak: typeof Keycloak_;
import { ExcludedUrlRegex, KeycloakOptions } from '../interfaces/keycloak-options';
import { KeycloakEvent } from '../interfaces/keycloak-event';
export declare class KeycloakService {
    private _instance;
    private _userProfile;
    private _enableBearerInterceptor;
    private _silentRefresh;
    private _loadUserProfileAtStartUp;
    private _bearerPrefix;
    private _authorizationHeaderName;
    private _excludedUrls;
    private _keycloakEvents$;
    private bindsKeycloakEvents;
    private loadExcludedUrls;
    private initServiceValues;
    init(options?: KeycloakOptions): Promise<boolean>;
    login(options?: Keycloak.KeycloakLoginOptions): Promise<void>;
    logout(redirectUri?: string): Promise<void>;
    register(options?: Keycloak.KeycloakLoginOptions): Promise<void>;
    isUserInRole(role: string, resource?: string): boolean;
    getUserRoles(allRoles?: boolean): string[];
    isLoggedIn(): Promise<boolean>;
    isTokenExpired(minValidity?: number): boolean;
    updateToken(minValidity?: number): Promise<boolean>;
    loadUserProfile(forceReload?: boolean): Promise<Keycloak_.KeycloakProfile>;
    getToken(forceLogin?: boolean): Promise<string>;
    getUsername(): string;
    clearToken(): void;
    addTokenToHeader(headers?: HttpHeaders): import("rxjs").Observable<HttpHeaders>;
    getKeycloakInstance(): Keycloak.KeycloakInstance;
    get excludedUrls(): ExcludedUrlRegex[];
    get enableBearerInterceptor(): boolean;
    get keycloakEvents$(): Subject<KeycloakEvent>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<KeycloakService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<KeycloakService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Y2xvYWsuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJrZXljbG9hay5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0ICogYXMgS2V5Y2xvYWtfIGZyb20gJ2tleWNsb2FrLWpzJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IEtleWNsb2FrOiB0eXBlb2YgS2V5Y2xvYWtfO1xuaW1wb3J0IHsgRXhjbHVkZWRVcmxSZWdleCwgS2V5Y2xvYWtPcHRpb25zIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9rZXljbG9hay1vcHRpb25zJztcbmltcG9ydCB7IEtleWNsb2FrRXZlbnQgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2tleWNsb2FrLWV2ZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEtleWNsb2FrU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfaW5zdGFuY2U7XG4gICAgcHJpdmF0ZSBfdXNlclByb2ZpbGU7XG4gICAgcHJpdmF0ZSBfZW5hYmxlQmVhcmVySW50ZXJjZXB0b3I7XG4gICAgcHJpdmF0ZSBfc2lsZW50UmVmcmVzaDtcbiAgICBwcml2YXRlIF9sb2FkVXNlclByb2ZpbGVBdFN0YXJ0VXA7XG4gICAgcHJpdmF0ZSBfYmVhcmVyUHJlZml4O1xuICAgIHByaXZhdGUgX2F1dGhvcml6YXRpb25IZWFkZXJOYW1lO1xuICAgIHByaXZhdGUgX2V4Y2x1ZGVkVXJscztcbiAgICBwcml2YXRlIF9rZXljbG9ha0V2ZW50cyQ7XG4gICAgcHJpdmF0ZSBiaW5kc0tleWNsb2FrRXZlbnRzO1xuICAgIHByaXZhdGUgbG9hZEV4Y2x1ZGVkVXJscztcbiAgICBwcml2YXRlIGluaXRTZXJ2aWNlVmFsdWVzO1xuICAgIGluaXQob3B0aW9ucz86IEtleWNsb2FrT3B0aW9ucyk6IFByb21pc2U8Ym9vbGVhbj47XG4gICAgbG9naW4ob3B0aW9ucz86IEtleWNsb2FrLktleWNsb2FrTG9naW5PcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcbiAgICBsb2dvdXQocmVkaXJlY3RVcmk/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHJlZ2lzdGVyKG9wdGlvbnM/OiBLZXljbG9hay5LZXljbG9ha0xvZ2luT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG4gICAgaXNVc2VySW5Sb2xlKHJvbGU6IHN0cmluZywgcmVzb3VyY2U/OiBzdHJpbmcpOiBib29sZWFuO1xuICAgIGdldFVzZXJSb2xlcyhhbGxSb2xlcz86IGJvb2xlYW4pOiBzdHJpbmdbXTtcbiAgICBpc0xvZ2dlZEluKCk6IFByb21pc2U8Ym9vbGVhbj47XG4gICAgaXNUb2tlbkV4cGlyZWQobWluVmFsaWRpdHk/OiBudW1iZXIpOiBib29sZWFuO1xuICAgIHVwZGF0ZVRva2VuKG1pblZhbGlkaXR5PzogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPjtcbiAgICBsb2FkVXNlclByb2ZpbGUoZm9yY2VSZWxvYWQ/OiBib29sZWFuKTogUHJvbWlzZTxLZXljbG9ha18uS2V5Y2xvYWtQcm9maWxlPjtcbiAgICBnZXRUb2tlbihmb3JjZUxvZ2luPzogYm9vbGVhbik6IFByb21pc2U8c3RyaW5nPjtcbiAgICBnZXRVc2VybmFtZSgpOiBzdHJpbmc7XG4gICAgY2xlYXJUb2tlbigpOiB2b2lkO1xuICAgIGFkZFRva2VuVG9IZWFkZXIoaGVhZGVycz86IEh0dHBIZWFkZXJzKTogaW1wb3J0KFwicnhqc1wiKS5PYnNlcnZhYmxlPEh0dHBIZWFkZXJzPjtcbiAgICBnZXRLZXljbG9ha0luc3RhbmNlKCk6IEtleWNsb2FrLktleWNsb2FrSW5zdGFuY2U7XG4gICAgZ2V0IGV4Y2x1ZGVkVXJscygpOiBFeGNsdWRlZFVybFJlZ2V4W107XG4gICAgZ2V0IGVuYWJsZUJlYXJlckludGVyY2VwdG9yKCk6IGJvb2xlYW47XG4gICAgZ2V0IGtleWNsb2FrRXZlbnRzJCgpOiBTdWJqZWN0PEtleWNsb2FrRXZlbnQ+O1xufVxuIl19