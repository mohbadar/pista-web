{"version":3,"file":"ngx-permissions.js","sources":["ng:/ngx-permissions/lib/enums/predefined-strategies.enum.ts","ng:/ngx-permissions/lib/store/configuration.store.ts","ng:/ngx-permissions/lib/service/configuration.service.ts","ng:/ngx-permissions/lib/store/permissions.store.ts","ng:/ngx-permissions/lib/utils/utils.ts","ng:/ngx-permissions/lib/service/permissions.service.ts","ng:/ngx-permissions/lib/store/roles.store.ts","ng:/ngx-permissions/lib/service/roles.service.ts","ng:/ngx-permissions/lib/directive/permissions.directive.ts","ng:/ngx-permissions/lib/router/permissions-guard.service.ts","ng:/ngx-permissions/lib/testing/permissions-allow.directive.stub.ts","ng:/ngx-permissions/lib/testing/permissions-restrict.directive.stub.ts","ng:/ngx-permissions/lib/model/role.model.ts","ng:/ngx-permissions/lib/index.ts"],"names":[],"mappings":"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","sourcesContent":["export const NgxPermissionsPredefinedStrategies = {\r\n    REMOVE: 'remove',\r\n    SHOW: 'show'\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Strategy } from '../service/configuration.service';\r\n\r\n@Injectable()\r\nexport class NgxPermissionsConfigurationStore {\r\n\r\n    public strategiesSource: BehaviorSubject<Strategy> = new BehaviorSubject<Strategy>({});\r\n    public strategies$: Observable<Strategy> = this.strategiesSource.asObservable();\r\n\r\n    public onAuthorisedDefaultStrategy: string | undefined;\r\n    public onUnAuthorisedDefaultStrategy: string | undefined;\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","import { Inject, Injectable, InjectionToken, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\r\nimport { NgxPermissionsConfigurationStore } from '../store/configuration.store';\r\n\r\nexport type StrategyFunction = (templateRef?: TemplateRef<any>) => void;\r\n\r\nexport type Strategy = {\r\n    [key: string]: StrategyFunction\r\n};\r\n\r\nexport const USE_CONFIGURATION_STORE = new InjectionToken('USE_CONFIGURATION_STORE');\r\n\r\n@Injectable()\r\nexport class NgxPermissionsConfigurationService {\r\n\r\n    private strategiesSource: BehaviorSubject<Strategy>;\r\n    public strategies$: Observable<Strategy>;\r\n    public onAuthorisedDefaultStrategy: string | undefined;\r\n    public onUnAuthorisedDefaultStrategy: string | undefined;\r\n\r\n    constructor(\r\n        @Inject(USE_CONFIGURATION_STORE) private isolate: boolean = false,\r\n        private configurationStore: NgxPermissionsConfigurationStore\r\n    ) {\r\n        this.strategiesSource = this.isolate ? new BehaviorSubject<Strategy>({}) : this.configurationStore.strategiesSource;\r\n        this.strategies$ = this.strategiesSource.asObservable();\r\n\r\n        this.onAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onAuthorisedDefaultStrategy;\r\n        this.onUnAuthorisedDefaultStrategy = this.isolate ? undefined : this.configurationStore.onUnAuthorisedDefaultStrategy;\r\n\r\n    }\r\n\r\n    public setDefaultOnAuthorizedStrategy(name: string | 'remove' | 'show'): void {\r\n        if (this.isolate) {\r\n            this.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n        } else {\r\n            this.configurationStore.onAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n            this.onAuthorisedDefaultStrategy = this.configurationStore.onAuthorisedDefaultStrategy;\r\n        }\r\n    }\r\n\r\n    public setDefaultOnUnauthorizedStrategy(name: string | 'remove' | 'show'): void {\r\n        if (this.isolate) {\r\n            this.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n        } else {\r\n            this.configurationStore.onUnAuthorisedDefaultStrategy = this.getDefinedStrategy(name);\r\n            this.onUnAuthorisedDefaultStrategy = this.configurationStore.onUnAuthorisedDefaultStrategy;\r\n        }\r\n    }\r\n\r\n    public addPermissionStrategy(key: string, func: StrategyFunction): void {\r\n        this.strategiesSource.value[key] = func;\r\n    }\r\n\r\n    public getStrategy(key: string) {\r\n        return this.strategiesSource.value[key];\r\n    }\r\n\r\n    public getAllStrategies() {\r\n        return this.strategiesSource.value;\r\n    }\r\n\r\n    private getDefinedStrategy(name: string | 'remove' | 'show') {\r\n        if (this.strategiesSource.value[name] || this.isPredefinedStrategy(name)) {\r\n            return name;\r\n        } else {\r\n            throw new Error(`No ' ${name} ' strategy is found please define one`);\r\n        }\r\n    }\r\n\r\n    private isPredefinedStrategy(strategy: string): boolean {\r\n        return strategy === NgxPermissionsPredefinedStrategies.SHOW || strategy === NgxPermissionsPredefinedStrategies.REMOVE;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxPermissionsStore {\r\n\r\n    public permissionsSource = new BehaviorSubject<{}>({});\r\n    public permissions$: Observable<{}> = this.permissionsSource.asObservable();\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","export function isFunction(functionToCheck: any): functionToCheck is Function {\r\n    let getType = {};\r\n    return !!functionToCheck && functionToCheck instanceof Function && getType.toString.call(functionToCheck) === '[object Function]';\r\n}\r\n\r\nexport function isPlainObject(value: any): boolean {\r\n    if (Object.prototype.toString.call(value) !== '[object Object]') {\r\n        return false;\r\n    } else {\r\n        let prototype = Object.getPrototypeOf(value);\r\n        return prototype === null || prototype === Object.prototype;\r\n    }\r\n}\r\n\r\nexport function isString(value: any): value is string {\r\n    return !!value && typeof value === 'string';\r\n}\r\n\r\nexport function isBoolean(value: any): value is boolean {\r\n    return typeof value === 'boolean';\r\n}\r\n\r\nexport function isPromise(promise: any) {\r\n    return Object.prototype.toString.call(promise) === '[object Promise]';\r\n}\r\n\r\nexport function notEmptyValue(value: any): boolean {\r\n    if (Array.isArray(value)) {\r\n        return value.length > 0;\r\n    }\r\n    return !!value;\r\n}\r\n\r\nexport function transformStringToArray(value: any): string[] {\r\n    if (isString(value)) {\r\n        return [value];\r\n    }\r\n    return value;\r\n}\r\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\r\n\r\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\r\nimport { catchError, first, map, mergeAll, switchMap } from 'rxjs/operators';\r\n\r\nimport { NgxPermission } from '../model/permission.model';\r\nimport { NgxPermissionsStore } from '../store/permissions.store';\r\n\r\nimport { isBoolean, isFunction, transformStringToArray } from '../utils/utils';\r\n\r\nexport type NgxPermissionsObject = { [name: string]: NgxPermission };\r\n\r\nexport const USE_PERMISSIONS_STORE = new InjectionToken('USE_PERMISSIONS_STORE');\r\n\r\n@Injectable()\r\nexport class NgxPermissionsService {\r\n\r\n    private permissionsSource: BehaviorSubject<NgxPermissionsObject>;\r\n    public permissions$: Observable<NgxPermissionsObject>;\r\n\r\n    constructor(\r\n        @Inject(USE_PERMISSIONS_STORE) private isolate: boolean = false,\r\n        private permissionsStore: NgxPermissionsStore\r\n    ) {\r\n        this.permissionsSource = isolate ? new BehaviorSubject<NgxPermissionsObject>({}) : permissionsStore.permissionsSource;\r\n        this.permissions$ = this.permissionsSource.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Remove all permissions from permissions source\r\n     */\r\n    public flushPermissions(): void {\r\n        this.permissionsSource.next({});\r\n    }\r\n\r\n    public hasPermission(permission: string | string[]): Promise<boolean> {\r\n        if (!permission || (Array.isArray(permission) && permission.length === 0)) {\r\n            return Promise.resolve(true);\r\n        }\r\n\r\n        permission = transformStringToArray(permission);\r\n        return this.hasArrayPermission(permission);\r\n    }\r\n\r\n    public loadPermissions(permissions: string[], validationFunction?: Function): void {\r\n        const newPermissions = permissions.reduce((source, p) =>\r\n                this.reducePermission(source, p, validationFunction)\r\n            , {});\r\n\r\n        this.permissionsSource.next(newPermissions);\r\n    }\r\n\r\n    public addPermission(permission: string | string[], validationFunction?: Function): void {\r\n        if (Array.isArray(permission)) {\r\n            const permissions = permission.reduce((source, p) =>\r\n                    this.reducePermission(source, p, validationFunction)\r\n                , this.permissionsSource.value);\r\n\r\n            this.permissionsSource.next(permissions);\r\n        } else {\r\n            const permissions = this.reducePermission(this.permissionsSource.value, permission, validationFunction);\r\n\r\n            this.permissionsSource.next(permissions);\r\n        }\r\n    }\r\n\r\n    public removePermission(permissionName: string): void {\r\n        const permissions = {\r\n            ...this.permissionsSource.value\r\n        };\r\n        delete permissions[permissionName];\r\n        this.permissionsSource.next(permissions);\r\n    }\r\n\r\n    public getPermission(name: string): NgxPermission {\r\n        return this.permissionsSource.value[name];\r\n    }\r\n\r\n    public getPermissions(): NgxPermissionsObject {\r\n        return this.permissionsSource.value;\r\n    }\r\n\r\n    private reducePermission(\r\n        source: NgxPermissionsObject,\r\n        name: string,\r\n        validationFunction?: Function\r\n    ): NgxPermissionsObject {\r\n        if (!!validationFunction && isFunction(validationFunction)) {\r\n            return {\r\n                ...source,\r\n                [name]: {name, validationFunction}\r\n            };\r\n        } else {\r\n            return {\r\n                ...source,\r\n                [name]: {name}\r\n            };\r\n        }\r\n    }\r\n\r\n    private hasArrayPermission(permissions: string[]): Promise<boolean> {\r\n        const promises: Observable<boolean>[] = permissions.map((key) => {\r\n            if (this.hasPermissionValidationFunction(key)) {\r\n                const immutableValue = {...this.permissionsSource.value};\r\n                const validationFunction: Function = <Function>this.permissionsSource.value[key].validationFunction;\r\n\r\n                return of(null).pipe(\r\n                    map(() => validationFunction(key, immutableValue)),\r\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => isBoolean(promise) ?\r\n                        of(promise as boolean) : promise as Promise<boolean>),\r\n                    catchError(() => of(false))\r\n                );\r\n            }\r\n\r\n            // check for name of the permission if there is no validation function\r\n            return of(!!this.permissionsSource.value[key]);\r\n        });\r\n\r\n        return from(promises).pipe(\r\n            mergeAll(),\r\n            first((data) => data !== false, false),\r\n            map((data) => data === false ? false : true)\r\n        ).toPromise().then((data: any) => data);\r\n    }\r\n\r\n    private hasPermissionValidationFunction(key: string): boolean {\r\n        return !!this.permissionsSource.value[key] &&\r\n            !!this.permissionsSource.value[key].validationFunction &&\r\n            isFunction(this.permissionsSource.value[key].validationFunction);\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport class NgxRolesStore {\r\n\r\n    public rolesSource = new BehaviorSubject<{}>({});\r\n\r\n    public roles$: Observable<{}> = this.rolesSource.asObservable();\r\n\r\n}\r\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\r\n\r\nimport { BehaviorSubject, from, Observable, ObservableInput, of } from 'rxjs';\r\nimport { catchError, every, first, map, mergeAll, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\nimport { NgxRole } from '../model/role.model';\r\nimport { NgxRolesStore } from '../store/roles.store';\r\nimport { isBoolean, isFunction, isPromise, transformStringToArray } from '../utils/utils';\r\nimport { NgxPermissionsService } from './permissions.service';\r\n\r\nexport const USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');\r\n\r\nexport type NgxRolesObject = { [name: string]: NgxRole };\r\n\r\n@Injectable()\r\nexport class NgxRolesService {\r\n\r\n    private rolesSource: BehaviorSubject<NgxRolesObject>;\r\n\r\n    public roles$: Observable<NgxRolesObject>;\r\n\r\n    constructor(\r\n        @Inject(USE_ROLES_STORE) private isolate: boolean = false,\r\n        private rolesStore: NgxRolesStore,\r\n        private permissionsService: NgxPermissionsService\r\n    ) {\r\n        this.rolesSource = this.isolate ? new BehaviorSubject<NgxRolesObject>({}) : this.rolesStore.rolesSource;\r\n        this.roles$ = this.rolesSource.asObservable();\r\n    }\r\n\r\n    public addRole(name: string, validationFunction: Function | string[]) {\r\n        const roles = {\r\n            ...this.rolesSource.value,\r\n            [name]: {name, validationFunction}\r\n        };\r\n        this.rolesSource.next(roles);\r\n    }\r\n\r\n    public addRoles(rolesObj: { [name: string]: Function | string[] }) {\r\n        Object.keys(rolesObj).forEach((key, index) => {\r\n            this.addRole(key, rolesObj[key]);\r\n        });\r\n    }\r\n\r\n    public flushRoles() {\r\n        this.rolesSource.next({});\r\n    }\r\n\r\n    public removeRole(roleName: string) {\r\n        let roles = {\r\n            ...this.rolesSource.value\r\n        };\r\n        delete roles[roleName];\r\n        this.rolesSource.next(roles);\r\n    }\r\n\r\n    public getRoles() {\r\n        return this.rolesSource.value;\r\n    }\r\n\r\n    public getRole(name: string) {\r\n        return this.rolesSource.value[name];\r\n    }\r\n\r\n    public hasOnlyRoles(names: string | string[]): Promise<boolean> {\r\n        const isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);\r\n\r\n        if (isNamesEmpty) return Promise.resolve(true);\r\n\r\n        names = transformStringToArray(names);\r\n\r\n        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])\r\n            .then(([hasRoles, hasPermissions]: [boolean, boolean]) => {\r\n                return hasRoles || hasPermissions;\r\n            });\r\n    }\r\n\r\n    private hasRoleKey(roleName: string[]): Promise<boolean> {\r\n        const promises: Observable<boolean>[] = roleName.map((key) => {\r\n            const hasValidationFunction = !!this.rolesSource.value[key] &&\r\n                                          !!this.rolesSource.value[key].validationFunction &&\r\n                                          isFunction(this.rolesSource.value[key].validationFunction);\r\n\r\n            if (hasValidationFunction && !isPromise(this.rolesSource.value[key].validationFunction)) {\r\n                const validationFunction: Function = <Function>this.rolesSource.value[key].validationFunction;\r\n                const immutableValue = {...this.rolesSource.value};\r\n\r\n                return of(null).pipe(\r\n                    map(() => validationFunction(key, immutableValue)),\r\n                    switchMap((promise: Promise<boolean> | boolean): ObservableInput<boolean> => isBoolean(promise) ?\r\n                        of(promise as boolean) : promise as Promise<boolean>),\r\n                    catchError(() => of(false))\r\n                );\r\n            }\r\n\r\n            return of(false);\r\n        });\r\n\r\n        return from(promises).pipe(\r\n            mergeAll(),\r\n            first((data: any) => data !== false, false),\r\n            map((data) => data !== false)\r\n        ).toPromise().then((data: any) => data);\r\n    }\r\n\r\n    private hasRolePermission(roles: NgxRolesObject, roleNames: string[]): Promise<boolean> {\r\n        return from(roleNames).pipe(\r\n            mergeMap((key) => {\r\n                if (roles[key] && Array.isArray(roles[key].validationFunction)) {\r\n                    return from(<string[]>roles[key].validationFunction).pipe(\r\n                        mergeMap((permission) => this.permissionsService.hasPermission(permission)),\r\n                        every((hasPermissions) => hasPermissions === true)\r\n                    );\r\n                }\r\n\r\n                return of(false);\r\n            }),\r\n            first((hasPermission) => hasPermission === true, false)\r\n        ).toPromise();\r\n    }\r\n\r\n}\r\n","import {\r\n    ChangeDetectorRef,\r\n    Directive,\r\n    EventEmitter,\r\n    Input, OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output, SimpleChanges,\r\n    TemplateRef,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport { merge, Subscription } from 'rxjs';\r\nimport { skip, take } from 'rxjs/operators';\r\n\r\nimport { NgxPermissionsPredefinedStrategies } from '../enums/predefined-strategies.enum';\r\nimport { NgxPermissionsConfigurationService, StrategyFunction } from '../service/configuration.service';\r\nimport { NgxPermissionsService } from '../service/permissions.service';\r\nimport { NgxRolesService } from '../service/roles.service';\r\nimport { isBoolean, isFunction, isString, notEmptyValue } from '../utils/utils';\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsDirective implements OnInit, OnDestroy, OnChanges  {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter();\r\n    @Output() permissionsUnauthorized = new EventEmitter();\r\n\r\n    private initPermissionSubscription: Subscription;\r\n    // skip first run cause merge will fire twice\r\n    private firstMergeUnusedRun = 1;\r\n    private currentAuthorizedState: boolean;\r\n\r\n    constructor(\r\n        private permissionsService: NgxPermissionsService,\r\n        private configurationService: NgxPermissionsConfigurationService,\r\n        private rolesService: NgxRolesService,\r\n        private viewContainer: ViewContainerRef,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private templateRef: TemplateRef<any>\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        this.initPermissionSubscription = this.validateExceptOnlyPermissions();\r\n    }\r\n\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const onlyChanges = changes['ngxPermissionsOnly'];\r\n        const exceptChanges = changes['ngxPermissionsExcept'];\r\n        if (onlyChanges || exceptChanges) {\r\n            // Due to bug when you pass empty array\r\n            if (onlyChanges && onlyChanges.firstChange) return;\r\n            if (exceptChanges && exceptChanges.firstChange) return;\r\n\r\n            merge(this.permissionsService.permissions$, this.rolesService.roles$)\r\n                .pipe(skip(this.firstMergeUnusedRun), take(1))\r\n                .subscribe(() => {\r\n                    if (notEmptyValue(this.ngxPermissionsExcept)) {\r\n                        this.validateExceptAndOnlyPermissions();\r\n                        return;\r\n                    }\r\n\r\n                    if (notEmptyValue(this.ngxPermissionsOnly)) {\r\n                        this.validateOnlyPermissions();\r\n                        return;\r\n                    }\r\n\r\n                    this.handleAuthorisedPermission(this.getAuthorisedTemplates());\r\n                });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.initPermissionSubscription) {\r\n            this.initPermissionSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    private validateExceptOnlyPermissions(): Subscription {\r\n        return merge(this.permissionsService.permissions$, this.rolesService.roles$)\r\n            .pipe(skip(this.firstMergeUnusedRun))\r\n            .subscribe(() => {\r\n                if (notEmptyValue(this.ngxPermissionsExcept)) {\r\n                    this.validateExceptAndOnlyPermissions();\r\n                    return;\r\n                }\r\n\r\n                if (notEmptyValue(this.ngxPermissionsOnly)) {\r\n                    this.validateOnlyPermissions();\r\n                    return;\r\n                }\r\n                this.handleAuthorisedPermission(this.getAuthorisedTemplates());\r\n            });\r\n    }\r\n\r\n    private validateExceptAndOnlyPermissions(): void {\r\n        Promise.all([this.permissionsService.hasPermission(this.ngxPermissionsExcept), this.rolesService.hasOnlyRoles(this.ngxPermissionsExcept)])\r\n            .then(([hasPermission, hasRole]) => {\r\n                if (hasPermission || hasRole) {\r\n                    this.handleUnauthorisedPermission(this.ngxPermissionsExceptElse || this.ngxPermissionsElse);\r\n                    return;\r\n                }\r\n\r\n                if (!!this.ngxPermissionsOnly)  throw false;\r\n\r\n                this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\r\n\r\n            }).catch(() => {\r\n                if (!!this.ngxPermissionsOnly) {\r\n                    this.validateOnlyPermissions();\r\n                } else {\r\n                    this.handleAuthorisedPermission(this.ngxPermissionsExceptThen || this.ngxPermissionsThen || this.templateRef);\r\n                }\r\n        });\r\n    }\r\n\r\n    private validateOnlyPermissions(): void {\r\n        Promise.all([this.permissionsService.hasPermission(this.ngxPermissionsOnly), this.rolesService.hasOnlyRoles(this.ngxPermissionsOnly)])\r\n            .then(([hasPermissions, hasRoles]) => {\r\n                if (hasPermissions || hasRoles) {\r\n                    this.handleAuthorisedPermission(this.ngxPermissionsOnlyThen || this.ngxPermissionsThen || this.templateRef);\r\n                } else {\r\n                    this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\r\n                }\r\n            }).catch(() => {\r\n                this.handleUnauthorisedPermission(this.ngxPermissionsOnlyElse || this.ngxPermissionsElse);\r\n        });\r\n    }\r\n\r\n    private handleUnauthorisedPermission(template: TemplateRef<any>): void {\r\n        if (isBoolean(this.currentAuthorizedState) && !this.currentAuthorizedState) return;\r\n\r\n        this.currentAuthorizedState = false;\r\n        this.permissionsUnauthorized.emit();\r\n\r\n        if (this.getUnAuthorizedStrategyInput()) {\r\n            this.applyStrategyAccordingToStrategyType(this.getUnAuthorizedStrategyInput());\r\n            return;\r\n        }\r\n\r\n        if (this.configurationService.onUnAuthorisedDefaultStrategy && !this.elseBlockDefined()) {\r\n            this.applyStrategy(this.configurationService.onUnAuthorisedDefaultStrategy);\r\n        } else {\r\n            this.showTemplateBlockInView(template);\r\n        }\r\n\r\n    }\r\n\r\n    private handleAuthorisedPermission(template: TemplateRef<any>): void {\r\n        if (isBoolean(this.currentAuthorizedState) && this.currentAuthorizedState) return;\r\n\r\n        this.currentAuthorizedState = true;\r\n        this.permissionsAuthorized.emit();\r\n\r\n        if (this.getAuthorizedStrategyInput()) {\r\n            this.applyStrategyAccordingToStrategyType(this.getAuthorizedStrategyInput());\r\n            return;\r\n        }\r\n\r\n        if (this.configurationService.onAuthorisedDefaultStrategy && !this.thenBlockDefined()) {\r\n            this.applyStrategy(this.configurationService.onAuthorisedDefaultStrategy);\r\n        } else {\r\n            this.showTemplateBlockInView(template);\r\n        }\r\n    }\r\n\r\n    private applyStrategyAccordingToStrategyType(strategy: string | Function): void {\r\n        if (isString(strategy)) {\r\n            this.applyStrategy(strategy);\r\n            return;\r\n        }\r\n\r\n        if (isFunction(strategy)) {\r\n            this.showTemplateBlockInView(this.templateRef);\r\n            (strategy as Function)(this.templateRef);\r\n            return;\r\n        }\r\n    }\r\n\r\n    private showTemplateBlockInView(template: TemplateRef<any>): void {\r\n        this.viewContainer.clear();\r\n        if (!template) {\r\n            return;\r\n        }\r\n\r\n        this.viewContainer.createEmbeddedView(template);\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    private getAuthorisedTemplates(): TemplateRef<any> {\r\n        return this.ngxPermissionsOnlyThen\r\n            || this.ngxPermissionsExceptThen\r\n            || this.ngxPermissionsThen\r\n            || this.templateRef;\r\n    }\r\n\r\n    private elseBlockDefined(): boolean {\r\n        return !!this.ngxPermissionsExceptElse || !!this.ngxPermissionsElse;\r\n    }\r\n\r\n    private thenBlockDefined() {\r\n        return !!this.ngxPermissionsExceptThen || !!this.ngxPermissionsThen;\r\n    }\r\n\r\n    private getAuthorizedStrategyInput() {\r\n        return this.ngxPermissionsOnlyAuthorisedStrategy ||\r\n            this.ngxPermissionsExceptAuthorisedStrategy ||\r\n            this.ngxPermissionsAuthorisedStrategy;\r\n    }\r\n\r\n    private getUnAuthorizedStrategyInput() {\r\n        return this.ngxPermissionsOnlyUnauthorisedStrategy ||\r\n            this.ngxPermissionsExceptUnauthorisedStrategy ||\r\n            this.ngxPermissionsUnauthorisedStrategy;\r\n    }\r\n\r\n    private applyStrategy(str: any) {\r\n        if (str === NgxPermissionsPredefinedStrategies.SHOW) {\r\n            this.showTemplateBlockInView(this.templateRef);\r\n            return;\r\n        }\r\n\r\n        if (str === NgxPermissionsPredefinedStrategies.REMOVE) {\r\n            this.viewContainer.clear();\r\n            return;\r\n        }\r\n        const strategy = this.configurationService.getStrategy(str);\r\n        this.showTemplateBlockInView(this.templateRef);\r\n        strategy(this.templateRef);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n    ActivatedRouteSnapshot,\r\n    CanActivate,\r\n    CanActivateChild,\r\n    CanLoad,\r\n    NavigationExtras,\r\n    Route,\r\n    Router,\r\n    RouterStateSnapshot\r\n} from '@angular/router';\r\n\r\nimport { forkJoin, from, Observable, of } from 'rxjs';\r\nimport { first, mergeMap, tap } from 'rxjs/operators';\r\n\r\nimport { NgxPermissionsRouterData } from '../model/permissions-router-data.model';\r\nimport { NgxPermissionsService } from '../service/permissions.service';\r\nimport { NgxRolesService } from '../service/roles.service';\r\nimport { isFunction, isPlainObject, transformStringToArray } from '../utils/utils';\r\n\r\ninterface NgxRedirectToNavigationParameters {\r\n    navigationCommands: any[] | Function;\r\n    navigationExtras?: NavigationExtras | Function;\r\n}\r\n\r\n@Injectable()\r\nexport class NgxPermissionsGuard implements CanActivate, CanLoad, CanActivateChild {\r\n\r\n    constructor(private permissionsService: NgxPermissionsService, private  rolesService: NgxRolesService, private router: Router) {\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean {\r\n        return this.hasPermissions(route, state);\r\n    }\r\n\r\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n        return this.hasPermissions(childRoute, state);\r\n    }\r\n\r\n    canLoad(route: Route): boolean | Observable<boolean> | Promise<boolean> {\r\n        return this.hasPermissions(route);\r\n    }\r\n\r\n    private hasPermissions(route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        const purePermissions = !!route && route.data ? route.data['permissions'] as NgxPermissionsRouterData : {};\r\n        let permissions: NgxPermissionsRouterData = this.transformPermission(purePermissions, route, state);\r\n\r\n        if (this.isParameterAvailable(permissions.except)) {\r\n            return this.passingExceptPermissionsValidation(permissions, route, state);\r\n        }\r\n\r\n        if (this.isParameterAvailable(permissions.only)) {\r\n            return this.passingOnlyPermissionsValidation(permissions, route, state);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private transformPermission(purePermissions: NgxPermissionsRouterData, route: any, state: any): any {\r\n        let permissions = {\r\n            ...purePermissions\r\n        };\r\n\r\n        if (isFunction(permissions.except)) {\r\n            permissions.except = (permissions.except as Function)(route, state);\r\n        }\r\n\r\n        if (isFunction(permissions.only)) {\r\n            permissions.only = (permissions.only as Function)(route, state);\r\n        }\r\n\r\n        permissions.except = transformStringToArray(permissions.except);\r\n        permissions.only = transformStringToArray(permissions.only);\r\n\r\n        return permissions;\r\n    }\r\n\r\n    private isParameterAvailable(permission: any) {\r\n        return !!(permission) && permission.length > 0;\r\n    }\r\n\r\n    private passingExceptPermissionsValidation(permissions: NgxPermissionsRouterData, route: any, state: any) {\r\n        if (!!permissions.redirectTo && ((isFunction(permissions.redirectTo)) || (isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(\r\n            permissions.redirectTo)))) {\r\n            let failedPermission = '';\r\n\r\n            return from(permissions.except as any[]).pipe(\r\n                mergeMap((data) => {\r\n                    return forkJoin([\r\n                        this.permissionsService.hasPermission(<string | string[]>data),\r\n                        this.rolesService.hasOnlyRoles(<string | string[]>data)\r\n                    ]).pipe(tap((hasPermissions: boolean[]) => {\r\n                        const dontHavePermissions = hasPermissions.every((data) => data === false);\r\n\r\n                        if (!dontHavePermissions) {\r\n                            failedPermission = data;\r\n                        }\r\n                    }));\r\n                }),\r\n                first((data: any) => data.some((data: boolean) => data === true), false),\r\n                mergeMap((isAllFalse) => {\r\n                    if (!!failedPermission) {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n\r\n                        return of(false);\r\n                    }\r\n\r\n                    if (!isAllFalse && permissions.only) {\r\n                        return this.onlyRedirectCheck(permissions, route, state);\r\n                    }\r\n\r\n                    return of(!isAllFalse);\r\n                })\r\n            ).toPromise();\r\n        }\r\n\r\n        return Promise.all([this.permissionsService.hasPermission(<string | string[]>permissions.except), this.rolesService.hasOnlyRoles(<string | string[]>permissions.except)])\r\n            .then(([hasPermission, hasRoles]) => {\r\n                if (hasPermission || hasRoles) {\r\n                    if (permissions.redirectTo) {\r\n                        this.redirectToAnotherRoute(permissions.redirectTo, route, state);\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n\r\n                if (permissions.only) {\r\n                    return this.checkOnlyPermissions(permissions, route, state);\r\n                }\r\n                return true;\r\n            });\r\n    }\r\n\r\n    private redirectToAnotherRoute(redirectTo: string | any[] | NgxRedirectToNavigationParameters | Function,\r\n                                   route: ActivatedRouteSnapshot | Route,\r\n                                   state?: RouterStateSnapshot,\r\n                                   failedPermissionName?: string) {\r\n\r\n        if (isFunction(redirectTo)) {\r\n            redirectTo = (redirectTo as Function)(failedPermissionName, route, state);\r\n        }\r\n\r\n        if (this.isRedirectionWithParameters(redirectTo)) {\r\n            if (this.hasNavigationExtrasAsFunction(redirectTo)) {\r\n                (<NgxRedirectToNavigationParameters>redirectTo).navigationExtras = ((<NgxRedirectToNavigationParameters>redirectTo).navigationExtras as Function)(\r\n                    route,\r\n                    state\r\n                );\r\n            }\r\n\r\n            if (this.hasNavigationCommandsAsFunction(redirectTo)) {\r\n                (<NgxRedirectToNavigationParameters>redirectTo).navigationCommands = ((<NgxRedirectToNavigationParameters>redirectTo).navigationCommands as Function)(\r\n                    route,\r\n                    state\r\n                );\r\n            }\r\n\r\n            this.router.navigate(\r\n                ((<NgxRedirectToNavigationParameters>redirectTo).navigationCommands as any[]),\r\n                ((<NgxRedirectToNavigationParameters> redirectTo).navigationExtras as NavigationExtras)\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        if (Array.isArray(redirectTo)) {\r\n            this.router.navigate(redirectTo);\r\n        } else {\r\n            this.router.navigate([redirectTo]);\r\n        }\r\n    }\r\n\r\n    private isRedirectionWithParameters(object: any | NgxRedirectToNavigationParameters): boolean {\r\n        return isPlainObject(object) && (!!object.navigationCommands || !!object.navigationExtras);\r\n    }\r\n\r\n    private hasNavigationExtrasAsFunction(redirectTo: any): boolean {\r\n        return !!(<NgxRedirectToNavigationParameters> redirectTo).navigationExtras &&\r\n            isFunction((<NgxRedirectToNavigationParameters> redirectTo).navigationExtras);\r\n    }\r\n\r\n    private hasNavigationCommandsAsFunction(redirectTo: any): boolean {\r\n        return !!(<NgxRedirectToNavigationParameters> redirectTo).navigationCommands &&\r\n            isFunction((<NgxRedirectToNavigationParameters> redirectTo).navigationCommands);\r\n    }\r\n\r\n    private onlyRedirectCheck(permissions: any, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot): Promise<boolean> {\r\n        let failedPermission = '';\r\n\r\n        return from(permissions.only).pipe(\r\n            mergeMap((data: any) => {\r\n                return forkJoin([\r\n                    this.permissionsService.hasPermission(<string | string[]>data),\r\n                    this.rolesService.hasOnlyRoles(<string | string[]>data)\r\n                ]).pipe(\r\n                    tap((hasPermission: boolean[]) => {\r\n                        const failed = hasPermission.every((data) => data === false);\r\n\r\n                        if (failed) {\r\n                            failedPermission = data;\r\n                        }\r\n                    })\r\n                );\r\n            }),\r\n            first(\r\n                (data: any) => {\r\n                    if (isFunction(permissions.redirectTo)) {\r\n                        return data.some((data: boolean) => data === true);\r\n                    }\r\n\r\n                    return data.every((data: boolean) => data === false);\r\n                },\r\n                false\r\n            ),\r\n            mergeMap((pass: boolean): Observable<boolean> => {\r\n                if (isFunction(permissions.redirectTo)) {\r\n                    if (pass) {\r\n                        return of(true);\r\n                    } else {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n                        return of(false);\r\n                    }\r\n                } else {\r\n                    if (!!failedPermission) {\r\n                        this.handleRedirectOfFailedPermission(permissions, failedPermission, route, state);\r\n                    }\r\n                    return of(!pass);\r\n                }\r\n            })\r\n        ).toPromise();\r\n    }\r\n\r\n    private handleRedirectOfFailedPermission(\r\n        permissions: any,\r\n        failedPermission: string,\r\n        route: ActivatedRouteSnapshot | Route,\r\n        state?: RouterStateSnapshot\r\n    ) {\r\n        if (this.isFailedPermissionPropertyOfRedirectTo(permissions, failedPermission)) {\r\n            this.redirectToAnotherRoute((<any>permissions.redirectTo)[failedPermission], route, state, failedPermission);\r\n        } else {\r\n            if (isFunction(permissions.redirectTo)) {\r\n                this.redirectToAnotherRoute((<any>permissions.redirectTo), route, state, failedPermission);\r\n            } else {\r\n                this.redirectToAnotherRoute((<any>permissions.redirectTo)['default'], route, state, failedPermission);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isFailedPermissionPropertyOfRedirectTo(permissions: any, failedPermission: string) {\r\n        return !!permissions.redirectTo && permissions.redirectTo[<any>failedPermission];\r\n    }\r\n\r\n    private checkOnlyPermissions(purePermissions: any, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        let permissions: NgxPermissionsRouterData = {\r\n            ...purePermissions\r\n        };\r\n\r\n        return Promise.all([this.permissionsService.hasPermission(<string | string[]>permissions.only), this.rolesService.hasOnlyRoles(<string | string[]>permissions.only)])\r\n            .then(([hasPermission, hasRole]) => {\r\n                if (hasPermission || hasRole) return true;\r\n\r\n                if (permissions.redirectTo) {\r\n                    this.redirectToAnotherRoute(permissions.redirectTo, route, state);\r\n                }\r\n\r\n                return false;\r\n            });\r\n    }\r\n\r\n    private passingOnlyPermissionsValidation(permissions: NgxPermissionsRouterData, route: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot) {\r\n        if ((isFunction(permissions.redirectTo) || isPlainObject(permissions.redirectTo) && !this.isRedirectionWithParameters(permissions.redirectTo))) {\r\n            return this.onlyRedirectCheck(permissions, route, state)\r\n        }\r\n        return this.checkOnlyPermissions(permissions, route, state);\r\n    }\r\n\r\n}\r\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { StrategyFunction } from '../service/configuration.service';\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsAllowStubDirective implements OnInit {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter();\r\n    @Output() permissionsUnauthorized = new EventEmitter();\r\n\r\n\r\n    constructor(private viewContainer: ViewContainerRef,\r\n                private templateRef: TemplateRef<any>) {}\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        this.viewContainer.createEmbeddedView(this.getAuthorizedTemplate());\r\n        this.permissionsUnauthorized.emit();\r\n    }\r\n\r\n\r\n    private getAuthorizedTemplate() {\r\n        return this.ngxPermissionsOnlyThen ||\r\n            this.ngxPermissionsExceptThen ||\r\n            this.ngxPermissionsThen ||\r\n            this.templateRef;\r\n    }\r\n\r\n}\r\n","import { Directive, EventEmitter, Input, OnInit, Output, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { StrategyFunction } from '../service/configuration.service';\r\n\r\n@Directive({\r\n    selector: '[ngxPermissionsOnly],[ngxPermissionsExcept]'\r\n})\r\nexport class NgxPermissionsRestrictStubDirective implements OnInit {\r\n\r\n    @Input() ngxPermissionsOnly: string | string[];\r\n    @Input() ngxPermissionsOnlyThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsOnlyElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsExcept: string | string[];\r\n    @Input() ngxPermissionsExceptElse: TemplateRef<any>;\r\n    @Input() ngxPermissionsExceptThen: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsThen: TemplateRef<any>;\r\n    @Input() ngxPermissionsElse: TemplateRef<any>;\r\n\r\n    @Input() ngxPermissionsOnlyAuthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsOnlyUnauthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsExceptUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsExceptAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Input() ngxPermissionsUnauthorisedStrategy: string | StrategyFunction;\r\n    @Input() ngxPermissionsAuthorisedStrategy: string | StrategyFunction;\r\n\r\n    @Output() permissionsAuthorized = new EventEmitter();\r\n    @Output() permissionsUnauthorized = new EventEmitter();\r\n\r\n\r\n    constructor(private viewContainer: ViewContainerRef) {}\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.viewContainer.clear();\r\n        if (this.getUnAuthorizedTemplate()) {\r\n            this.viewContainer.createEmbeddedView(this.getUnAuthorizedTemplate());\r\n        }\r\n        this.permissionsUnauthorized.emit();\r\n    }\r\n\r\n\r\n    private getUnAuthorizedTemplate() {\r\n        return this.ngxPermissionsOnlyElse ||\r\n            this.ngxPermissionsExceptElse ||\r\n            this.ngxPermissionsElse;\r\n    }\r\n\r\n}\r\n","export class NgxRole {\r\n    name: string;\r\n    validationFunction: Function | string[];\r\n\r\n    constructor(name: string, validationFunction: Function | string[]) {\r\n        this.name = name;\r\n        this.validationFunction = validationFunction;\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NgxPermissionsDirective } from './directive/permissions.directive';\r\nimport { NgxPermissionsService, USE_PERMISSIONS_STORE } from './service/permissions.service';\r\nimport { NgxPermissionsGuard } from './router/permissions-guard.service';\r\nimport { NgxRolesService, USE_ROLES_STORE } from './service/roles.service';\r\nimport { NgxPermissionsStore } from './store/permissions.store';\r\nimport { NgxRolesStore } from './store/roles.store';\r\nimport { NgxPermissionsAllowStubDirective } from './testing/permissions-allow.directive.stub';\r\nimport { NgxPermissionsRestrictStubDirective } from './testing/permissions-restrict.directive.stub';\r\nimport { NgxPermissionsConfigurationService, USE_CONFIGURATION_STORE } from './service/configuration.service';\r\nimport { NgxPermissionsConfigurationStore } from './store/configuration.store';\r\n\r\nexport * from './store/roles.store'\r\nexport * from './store/permissions.store'\r\nexport * from './store/configuration.store'\r\n\r\nexport * from './directive/permissions.directive';\r\n\r\nexport * from './service/permissions.service';\r\nexport * from './service/roles.service';\r\nexport * from './service/configuration.service';\r\n\r\nexport * from './router/permissions-guard.service';\r\n\r\nexport * from './model/permissions-router-data.model'\r\nexport * from './model/role.model'\r\n\r\nexport * from './testing/permissions-allow.directive.stub'\r\nexport * from './testing/permissions-restrict.directive.stub'\r\n\r\nexport * from './enums/predefined-strategies.enum'\r\n\r\nexport interface NgxPermissionsModuleConfig {\r\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\r\n    rolesIsolate?: boolean;\r\n    permissionsIsolate?: boolean;\r\n    configurationIsolate?: boolean\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsModule {\r\n    static forRoot(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxPermissionsModule,\r\n            providers: [\r\n                NgxPermissionsStore,\r\n                NgxRolesStore,\r\n                NgxPermissionsConfigurationStore,\r\n                NgxPermissionsService,\r\n                NgxPermissionsGuard,\r\n                NgxRolesService,\r\n                NgxPermissionsConfigurationService,\r\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\r\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\r\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\r\n            ]\r\n        };\r\n    }\r\n\r\n    static forChild(config: NgxPermissionsModuleConfig = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxPermissionsModule,\r\n            providers: [\r\n                {provide: USE_PERMISSIONS_STORE, useValue: config.permissionsIsolate},\r\n                {provide: USE_ROLES_STORE, useValue: config.rolesIsolate},\r\n                {provide: USE_CONFIGURATION_STORE, useValue: config.configurationIsolate},\r\n                NgxPermissionsConfigurationService,\r\n                NgxPermissionsService,\r\n                NgxRolesService,\r\n                NgxPermissionsGuard\r\n            ]\r\n        };\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsAllowStubDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsAllowStubDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsAllowStubModule {\r\n}\r\n\r\n\r\n@NgModule({\r\n    imports: [],\r\n    declarations: [\r\n        NgxPermissionsRestrictStubDirective\r\n    ],\r\n    exports: [\r\n        NgxPermissionsRestrictStubDirective\r\n    ]\r\n})\r\nexport class NgxPermissionsRestrictStubModule {\r\n}\r\n\r\n\r\n"]}