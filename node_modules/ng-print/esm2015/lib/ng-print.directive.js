/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input, Inject } from "@angular/core";
import { DOCUMENT } from '@angular/common';
import { WINDOW } from './window.ref';
export class NgPrintDirective {
    /**
     * @param {?} document
     * @param {?} window
     */
    constructor(document, window) {
        this.document = document;
        this.window = window;
    }
    /**
     * @return {?}
     */
    print() {
        /** @type {?} */
        const x = this.document.getElementsByTagName("head")[0].innerHTML;
        /** @type {?} */
        const iframe = this.document.createElement("iframe");
        iframe.style.display = 'none';
        this.document.body.appendChild(iframe);
        iframe.contentWindow.document.write(x);
        iframe.contentWindow.document.write(this.elementToPrint.innerHTML);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.window.frames[0].print();
        }), 500);
        // remove iframe after print or cancelation
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            var a = this.document.querySelectorAll('iframe');
            a[0].parentNode.removeChild(a[0]);
        }), 500);
    }
}
NgPrintDirective.decorators = [
    { type: Directive, args: [{
                selector: "button[ngPrint]"
            },] }
];
/** @nocollapse */
NgPrintDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [WINDOW,] }] }
];
NgPrintDirective.propDecorators = {
    elementToPrint: [{ type: Input }],
    print: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    NgPrintDirective.prototype.elementToPrint;
    /**
     * @type {?}
     * @private
     */
    NgPrintDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    NgPrintDirective.prototype.window;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJpbnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctcHJpbnQvIiwic291cmNlcyI6WyJsaWIvbmctcHJpbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBS3RDLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7O0lBSXpCLFlBQzhCLFFBQWEsRUFDZixNQUFXO1FBRFQsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQUNmLFdBQU0sR0FBTixNQUFNLENBQUs7SUFDbkMsQ0FBQzs7OztJQUdFLEtBQUs7O2NBRUYsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUzs7Y0FDM0QsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUNwRCxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBQyxNQUFNLENBQUM7UUFFNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUNoQyxDQUFDO1FBRUYsVUFBVTs7O1FBQUUsR0FBRyxFQUFFO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEMsQ0FBQyxHQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRVIsMkNBQTJDO1FBQzNDLFVBQVU7OztRQUFFLEdBQUcsRUFBRTs7Z0JBQ1QsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO1lBQ2hELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3JDLENBQUMsR0FBRSxHQUFHLENBQUMsQ0FBQztJQUNaLENBQUM7OztZQWxDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGlCQUFpQjthQUM5Qjs7Ozs0Q0FNUSxNQUFNLFNBQUMsUUFBUTs0Q0FDZixNQUFNLFNBQUMsTUFBTTs7OzZCQUpqQixLQUFLO29CQU9MLFlBQVksU0FBQyxPQUFPOzs7O0lBUHJCLDBDQUEwQzs7Ozs7SUFHdEMsb0NBQXVDOzs7OztJQUN2QyxrQ0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIEluamVjdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgV0lORE9XIH0gZnJvbSAnLi93aW5kb3cucmVmJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6IFwiYnV0dG9uW25nUHJpbnRdXCJcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nUHJpbnREaXJlY3RpdmUge1xyXG5cclxuICAgIEBJbnB1dCgpIGVsZW1lbnRUb1ByaW50OiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueSwgXHJcbiAgICAgICAgQEluamVjdChXSU5ET1cpIHByaXZhdGUgd2luZG93OiBhbnlcclxuICAgICkgeyB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxyXG4gICAgcHVibGljIHByaW50KCk6IHZvaWQge1xyXG5cclxuICAgICAgICBjb25zdCB4ID0gdGhpcy5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uaW5uZXJIVE1MO1xyXG4gICAgICAgIGNvbnN0IGlmcmFtZSA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcclxuICAgICAgICBpZnJhbWUuc3R5bGUuZGlzcGxheT0nbm9uZSc7XHJcblxyXG4gICAgICAgIHRoaXMuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xyXG4gICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50LndyaXRlKHgpO1xyXG4gICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50LndyaXRlKFxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRUb1ByaW50LmlubmVySFRNTFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy53aW5kb3cuZnJhbWVzWzBdLnByaW50KCk7XHJcbiAgICAgICAgfSwgNTAwKTtcclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlIGlmcmFtZSBhZnRlciBwcmludCBvciBjYW5jZWxhdGlvblxyXG4gICAgICAgIHNldFRpbWVvdXQoICgpID0+IHtcclxuICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lmcmFtZScpO1xyXG4gICAgICAgICAgICBhWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYVswXSlcclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgfVxyXG59Il19