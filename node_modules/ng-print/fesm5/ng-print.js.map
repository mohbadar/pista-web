{"version":3,"file":"ng-print.js","sources":["ng://ng-print/lib/window.ref.ts","ng://ng-print/lib/ng-print.directive.ts","ng://ng-print/lib/ng-print.module.ts"],"sourcesContent":["// copy from https://brianflove.com/2018/01/11/angular-window-provider/\r\n\r\nimport { isPlatformBrowser } from \"@angular/common\";\r\nimport { ClassProvider, FactoryProvider, InjectionToken, PLATFORM_ID } from '@angular/core';\r\n\r\n/* Create a new injection token for injecting the window into a component. */\r\nexport const WINDOW = new InjectionToken('WindowToken');\r\n\r\n/* Define abstract class for obtaining reference to the global window object. */\r\nexport abstract class WindowRef {\r\n\r\n  get nativeWindow(): Window | Object {\r\n    throw new Error('Not implemented.');\r\n  }\r\n\r\n}\r\n\r\n/* Define class that implements the abstract class and returns the native window object. */\r\nexport class BrowserWindowRef extends WindowRef {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  get nativeWindow(): Window | Object {\r\n    return window;\r\n  }\r\n\r\n}\r\n\r\n/* Create an factory function that returns the native window object. */\r\nexport function windowFactory(browserWindowRef: BrowserWindowRef, platformId: Object): Window | Object {\r\n  if (isPlatformBrowser(platformId)) {\r\n    return browserWindowRef.nativeWindow;\r\n  }\r\n  return new Object();\r\n}\r\n\r\n/* Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class. */\r\nconst browserWindowProvider: ClassProvider = {\r\n  provide: WindowRef,\r\n  useClass: BrowserWindowRef\r\n};\r\n\r\n/* Create an injectable provider that uses the windowFactory function for returning the native window object. */\r\nconst windowProvider: FactoryProvider = {\r\n  provide: WINDOW,\r\n  useFactory: windowFactory,\r\n  deps: [ WindowRef, PLATFORM_ID ]\r\n};\r\n\r\n/* Create an array of providers. */\r\nexport const WINDOW_PROVIDERS = [\r\n  browserWindowProvider,\r\n  windowProvider\r\n];","import { Directive, HostListener, Input, Inject } from \"@angular/core\";\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { WINDOW } from './window.ref';\r\n\r\n@Directive({\r\n    selector: \"button[ngPrint]\"\r\n})\r\nexport class NgPrintDirective {\r\n\r\n    @Input() elementToPrint: HTMLInputElement;\r\n\r\n    constructor(\r\n        @Inject(DOCUMENT) private document: any, \r\n        @Inject(WINDOW) private window: any\r\n    ) { }\r\n\r\n    @HostListener('click')\r\n    public print(): void {\r\n\r\n        const x = this.document.getElementsByTagName(\"head\")[0].innerHTML;\r\n        const iframe = this.document.createElement(\"iframe\");\r\n        iframe.style.display='none';\r\n\r\n        this.document.body.appendChild(iframe);\r\n        iframe.contentWindow.document.write(x);\r\n        iframe.contentWindow.document.write(\r\n            this.elementToPrint.innerHTML\r\n        );\r\n\r\n        setTimeout( () => {\r\n            this.window.frames[0].print();\r\n        }, 500);\r\n\r\n        // remove iframe after print or cancelation\r\n        setTimeout( () => {\r\n            var a = this.document.querySelectorAll('iframe');\r\n            a[0].parentNode.removeChild(a[0])\r\n        }, 500);\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { NgPrintDirective } from './ng-print.directive';\nimport { WINDOW_PROVIDERS } from \"./window.ref\";\n\n\n@NgModule({\n  declarations: [NgPrintDirective],\n  imports: [\n  ],\n  exports: [NgPrintDirective],\n  providers: [ WINDOW_PROVIDERS ]\n})\nexport class NgPrintModule { }\n"],"names":["tslib_1.__extends"],"mappings":";;;;;;;;;;AAMA,IAAa,MAAM,GAAG,IAAI,cAAc,CAAC,aAAa,CAAC;;;;;AAGvD;;;;;IAAA;KAMC;IAJC,sBAAI,mCAAY;;;;QAAhB;YACE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACrC;;;OAAA;IAEH,gBAAC;CAAA,IAAA;;AAGD;;IAAsCA,oCAAS;IAE7C;eACE,iBAAO;KACR;IAED,sBAAI,0CAAY;;;;QAAhB;YACE,OAAO,MAAM,CAAC;SACf;;;OAAA;IAEH,uBAAC;CAVD,CAAsC,SAAS,GAU9C;;;;;;;AAGD,SAAgB,aAAa,CAAC,gBAAkC,EAAE,UAAkB;IAClF,IAAI,iBAAiB,CAAC,UAAU,CAAC,EAAE;QACjC,OAAO,gBAAgB,CAAC,YAAY,CAAC;KACtC;IACD,OAAO,IAAI,MAAM,EAAE,CAAC;CACrB;;;IAGK,qBAAqB,GAAkB;IAC3C,OAAO,EAAE,SAAS;IAClB,QAAQ,EAAE,gBAAgB;CAC3B;;;IAGK,cAAc,GAAoB;IACtC,OAAO,EAAE,MAAM;IACf,UAAU,EAAE,aAAa;IACzB,IAAI,EAAE,CAAE,SAAS,EAAE,WAAW,CAAE;CACjC;;;AAGD,IAAa,gBAAgB,GAAG;IAC9B,qBAAqB;IACrB,cAAc;CACf;;;;;;ACvDD;IAWI,0BAC8B,QAAa,EACf,MAAW;QADT,aAAQ,GAAR,QAAQ,CAAK;QACf,WAAM,GAAN,MAAM,CAAK;KAClC;;;;IAGE,gCAAK;;;IADZ;QAAA,iBAsBC;;YAnBS,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;;YAC3D,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,OAAO,GAAC,MAAM,CAAC;QAE5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACvC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAC/B,IAAI,CAAC,cAAc,CAAC,SAAS,CAChC,CAAC;QAEF,UAAU;;;QAAE;YACR,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;SACjC,GAAE,GAAG,CAAC,CAAC;;QAGR,UAAU;;;QAAE;;gBACJ,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC;YAChD,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;SACpC,GAAE,GAAG,CAAC,CAAC;KACX;;gBAlCJ,SAAS,SAAC;oBACP,QAAQ,EAAE,iBAAiB;iBAC9B;;;;gDAMQ,MAAM,SAAC,QAAQ;gDACf,MAAM,SAAC,MAAM;;;iCAJjB,KAAK;wBAOL,YAAY,SAAC,OAAO;;IAuBzB,uBAAC;CAnCD;;;;;;ACJA;IAKA;KAO8B;;gBAP7B,QAAQ,SAAC;oBACR,YAAY,EAAE,CAAC,gBAAgB,CAAC;oBAChC,OAAO,EAAE,EACR;oBACD,OAAO,EAAE,CAAC,gBAAgB,CAAC;oBAC3B,SAAS,EAAE,CAAE,gBAAgB,CAAE;iBAChC;;IAC4B,oBAAC;CAP9B;;;;"}