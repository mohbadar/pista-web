(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-print', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['ng-print'] = {}, global.ng.core, global.ng.common));
}(this, function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /* Create a new injection token for injecting the window into a component. */
    /** @type {?} */
    var WINDOW = new core.InjectionToken('WindowToken');
    /* Define abstract class for obtaining reference to the global window object. */
    /**
     * @abstract
     */
    var   /* Define abstract class for obtaining reference to the global window object. */
    /**
     * @abstract
     */
    WindowRef = /** @class */ (function () {
        function WindowRef() {
        }
        Object.defineProperty(WindowRef.prototype, "nativeWindow", {
            get: /**
             * @return {?}
             */
            function () {
                throw new Error('Not implemented.');
            },
            enumerable: true,
            configurable: true
        });
        return WindowRef;
    }());
    /* Define class that implements the abstract class and returns the native window object. */
    var   /* Define class that implements the abstract class and returns the native window object. */
    BrowserWindowRef = /** @class */ (function (_super) {
        __extends(BrowserWindowRef, _super);
        function BrowserWindowRef() {
            return _super.call(this) || this;
        }
        Object.defineProperty(BrowserWindowRef.prototype, "nativeWindow", {
            get: /**
             * @return {?}
             */
            function () {
                return window;
            },
            enumerable: true,
            configurable: true
        });
        return BrowserWindowRef;
    }(WindowRef));
    /* Create an factory function that returns the native window object. */
    /**
     * @param {?} browserWindowRef
     * @param {?} platformId
     * @return {?}
     */
    function windowFactory(browserWindowRef, platformId) {
        if (common.isPlatformBrowser(platformId)) {
            return browserWindowRef.nativeWindow;
        }
        return new Object();
    }
    /* Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class. */
    /** @type {?} */
    var browserWindowProvider = {
        provide: WindowRef,
        useClass: BrowserWindowRef
    };
    /* Create an injectable provider that uses the windowFactory function for returning the native window object. */
    /** @type {?} */
    var windowProvider = {
        provide: WINDOW,
        useFactory: windowFactory,
        deps: [WindowRef, core.PLATFORM_ID]
    };
    /* Create an array of providers. */
    /** @type {?} */
    var WINDOW_PROVIDERS = [
        browserWindowProvider,
        windowProvider
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgPrintDirective = /** @class */ (function () {
        function NgPrintDirective(document, window) {
            this.document = document;
            this.window = window;
        }
        /**
         * @return {?}
         */
        NgPrintDirective.prototype.print = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var x = this.document.getElementsByTagName("head")[0].innerHTML;
            /** @type {?} */
            var iframe = this.document.createElement("iframe");
            iframe.style.display = 'none';
            this.document.body.appendChild(iframe);
            iframe.contentWindow.document.write(x);
            iframe.contentWindow.document.write(this.elementToPrint.innerHTML);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.window.frames[0].print();
            }), 500);
            // remove iframe after print or cancelation
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var a = _this.document.querySelectorAll('iframe');
                a[0].parentNode.removeChild(a[0]);
            }), 500);
        };
        NgPrintDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "button[ngPrint]"
                    },] }
        ];
        /** @nocollapse */
        NgPrintDirective.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [WINDOW,] }] }
        ]; };
        NgPrintDirective.propDecorators = {
            elementToPrint: [{ type: core.Input }],
            print: [{ type: core.HostListener, args: ['click',] }]
        };
        return NgPrintDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgPrintModule = /** @class */ (function () {
        function NgPrintModule() {
        }
        NgPrintModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgPrintDirective],
                        imports: [],
                        exports: [NgPrintDirective],
                        providers: [WINDOW_PROVIDERS]
                    },] }
        ];
        return NgPrintModule;
    }());

    exports.NgPrintModule = NgPrintModule;
    exports.ɵa = NgPrintDirective;
    exports.ɵb = WINDOW;
    exports.ɵc = WindowRef;
    exports.ɵd = BrowserWindowRef;
    exports.ɵe = windowFactory;
    exports.ɵf = WINDOW_PROVIDERS;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-print.umd.js.map
